#include <bits/stdc++.h>

using namespace std;


class SingleOrDouble {
public:

int done[11][11*11];
double memo[11][11*11];

double f(int N, int D, int val) {
	if (val < 1) return 0;
	if (N == 1) return val > D ? 0 : 1.0/D;
	if (done[N][val]) {
		return memo[N][val];
	}
	done[N][val] = 1;
	double p = 0;
	for (int roll = 1; roll <= D; roll++) {
		p += (1.0/D) * f(N-1, D, val-roll);
	}
	return memo[N][val] = p;
}

double probAlice(int N, int D, int A, int B) {
	memset(done, 0, sizeof(done));
	double pA = f(N, D, A);
	double pB = f(N, D, B);
	// p = pA + pB*pA + (1 - pA - pB*pA - pB*pB)*p
	double p = (pA + pB*pA) / (pA + pB*pA + pB*pB);
	return p;	
}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	SingleOrDouble *obj;
	double answer;
	obj = new SingleOrDouble();
	clock_t startTime = clock();
	answer = obj->probAlice(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 1;
	p3 = 2;
	p4 = 0.75;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 6;
	p2 = 1;
	p3 = 2;
	p4 = 0.8749999999999999;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 6;
	p2 = 2;
	p3 = 7;
	p4 = 0.538461538461538;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 10;
	p2 = 29;
	p3 = 16;
	p4 = 0.3644067796610159;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
