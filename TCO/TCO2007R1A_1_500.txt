#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TableLabel {
public:

vector<string> split_nonre(string s, string sep)
{
	char *sC = (char *) malloc(s.size()+1);
	strcpy(sC, s.c_str());
	char *sepC = (char *) sep.c_str();
	char *status = NULL;
	
	char *word;
	vector<string> results;
	while ((word = strtok_r(sC, sepC, &status)) != NULL)
	{
		results.push_back(word);
		sC = NULL;
	}
	return results;
}
vector< vector<string> > v;
int h, w;

bool isColSuffix(int c, string sub)
{
	int len = sub.size();
	for (int r = 0; r < h; r++)
	{
		if (v[r][c].size() > len && v[r][c].substr(v[r][c].size()-len, len) == sub)
		{
			continue;
		}
		return false;
	}
	return true;
}
	

bool isRowPrefix(int r, string sub)
{
	int len = sub.size();
	for (int c = 0; c < w; c++)
	{
		if (v[r][c].size() > len && v[r][c].substr(0, len) == sub)
		{
			continue;
		}
		return false;
	}
	return true;
}

vector <string> labels(vector <string> table) 
{
	vector<string> NONE, MULTI;
	NONE.push_back("none");
	MULTI.push_back("multiple");
	
	for (int i = 0; i < table.size(); i++)
	{
		vector<string> x = split_nonre(table[i], " ");
		vector<string> row;
		for (int j = 0; j < x.size(); j++)
		{
			if (x[j].size() > 0)
			{
				row.push_back(x[j]);
			}
		}
		v.push_back(row);
	}
	
	h = v.size();
	w = v[0].size();
	
	vector< set<string> > rows, cols;
	for (int c = 0; c < w; c++)
	{
		string s = v[0][c];
		int len = s.size();
		set<string> colset;
		for (int i = 1; i <= len-1; i++)
		{
			string sub = s.substr(len-i, i);
			if (isColSuffix(c, sub))
			{
				colset.insert(sub);
			}
		}
		if (colset.size() == 0) 
			return NONE;
		cols.push_back(colset);
	}
	for (int r = 0; r < h; r++)
	{
		string s = v[r][0];
		int len = s.size();
		set<string> rowset;
		for (int i = 1; i <= len-1; i++)
		{
			string sub = s.substr(0, i);
			if (isRowPrefix(r, sub))
			{
				rowset.insert(sub);
			}
		}
		if (rowset.size() == 0)
			return NONE;
		rows.push_back(rowset);
	}
	cout << rows.size() << " " << cols.size() << endl;
	for (int r = 0; r < h; r++)
	{
		for (int c = 0; c < w; c++)
		{
			set<string> rs, cs;
			for (typeof(rows[r].begin()) it = rows[r].begin(); it != rows[r].end(); it++)
			{
				for (typeof(cols[c].begin()) it2 = cols[c].begin(); it2 != cols[c].end(); it2++)
				{
					if (*it+*it2 == v[r][c])
					{
						rs.insert(*it);
						cs.insert(*it2);
					}
				}
			}
			rows[r] = rs;
			cols[c] = cs;
		}
	}
	vector<string> ret;
	for (int c = 0; c < w; c++)
	{
		if (cols[c].size() > 1)
			return MULTI;
		ret.push_back(*cols[c].begin());
	}
	for (int r = 0; r < h; r++)
	{
		if (rows[r].size() > 1)
			return MULTI;
		ret.push_back(*rows[r].begin());
	}
	return ret;			
}
};


//Powered by [KawigiEdit]
Problem Statement
    
A rectangular table of strings is formed by giving each row and each column a label. 

Each label consists of one or more uppercase letters. 

The string in any row and column of the table is just the column label appended to the row label. 

Here is an example with 2 rows and 3 columns
          X    XX   XXX
ABC     ABCX ABCXX ABCXXX
D       DX   DXX   DXXX

The problem is that we are given the table entries, but don't know what the row and column labels are. 

Given a vector <string> table, return a vector <string> containing the column labels in left to right order, followed by the row labels in top to bottom order. 

If there is no way to assign non-empty labels to the table, or if there are multiple ways to assign them, 
return a vector <string> with just one element, "none" or "multiple" (in lowercase, without the quotes).

The i-th element of table will give the i-th row of the table (i=0 is the top row), with adjacent entries separated by one or more spaces. 

It may have leading or trailing spaces.

Definition
    
Class:
TableLabel
Method:
labels
Parameters:
vector <string>
Returns:
vector <string>
Method signature:
vector <string> labels(vector <string> table)
(be sure your method is public)
    

Constraints
-
table will contain between 1 and 50 elements, inclusive.
-
Each element of table will contain between 1 and 50 characters, inclusive.
-
Each element of table will contain only spaces (' ') and uppercase letters ('A'-'Z').
-
Each element of table will contain at least 1 entry.
-
Each element of table will contain the same number of entries.
Examples
0)

    
{"  ABCX ABCXX   ABCXXX  ","DX DXX DXXX    "}
Returns: {"X", "XX", "XXX", "ABC", "D" }
This is the example given above.
1)

    
{"AAA AAA"," AAA   AAA"}
Returns: {"multiple" }
The row labels could both be "A" and the column labels both be "AA", or the row labels could both be "AA" and column labels "A".
2)

    
{"AB CD"}
Returns: {"none" }

If the row label could be empty we could label this table by giving the columns the labels "AB" and "CD", but that is not allowed.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.