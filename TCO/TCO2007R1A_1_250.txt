vector<int> v;
int np;
int L;

int memo[110][60];

int f(int n, int p) // longest segment after inserting n points in 
{
	if (p == np)
	{
		return 0;
	}
	if (n == 0)
	{
		int m = 0;
		for (int i = p+1; i < np; i++)
		{
			m = max(m, v[i]-v[i-1]);
		}
		return m;
	}
	int& r = memo[n][p];
	if (r != -1)
		return r;
		
	r = 0;
	for (int k = 0; k <= n; k++)
	{
		// put k items between p,p+1
		int d = v[p+1]-v[p];
		if (k+1 >= d)
			continue;
		int len;
		len = (d+k)/(k+1);
		r  = max(r, len+f(n-k, p+1));
	}
	return r;
}

int unserviced(int pikeLength, int n, vector <int> plazas) 
{
	v = plazas;
	L = pikeLength;
	v.insert(v.begin(), 0);
	v.push_back(L);
	sort(v.begin(), v.end());
	np = v.size();	
	memset(memo, -1, sizeof(memo));
	return f(n, 0);	
}
Problem Statement
    
The turnpike has mile markers at each mile along its length, with 0 at the western end and pikeLength at the eastern end 
(so it is exactly pikeLength miles long). 

We locate our service plazas at various mile markers. Each plaza can service traffic going in either direction, so we never place multiple plazas at the same mile marker. 

We also never place a plaza at either end of the turnpike.

The locations of all the existing plazas are given in a vector <int> plazas. 

We are interested in locating n new plazas along the turnpike in such a way as to minimize the longest segment of turnpike that has no plaza. 

Given pikeLength, n, and plazas, determine the best locations for the n new plazas and return the length of the longest unserviced segment after the new plazas have been added.

Definition
    
Class:
Turnpike
Method:
unserviced
Parameters:
int, int, vector <int>
Returns:
int
Method signature:
int unserviced(int pikeLength, int n, vector <int> plazas)
(be sure your method is public)
    

Constraints
-
pikeLength will be between 100 and 1000, inclusive.
-
n will be between 1 and 100, inclusive.
-
plazas will contain between 0 and 50 elements, inclusive.
-
The elements in plazas will be distinct values between 1 and pikeLength-1, inclusive.
-
n plus the number of elements in plazas will be less than pikeLength.
Examples
0)

    
1000
1
{300,701,800}
Returns: 300
The new plaza should be placed in the segment between 300 and 701. 
But the best we can do is to make the longest unserviced segment be of length 300, 
since the segment from 0 to 300 will still be unserviced.

1)

    
1000
1
{200,701,800}
Returns: 251
We should place the new plaza in the segment between 200 and 701. 
We can reduce the longest unserviced segment to 251 by placing it either at 450 or at 451.
2)

    
800
7
{622,411,201,555,755,82}
Returns: 70
The seven new plazas can be distributed along the turnpike so that the longest unserviced segments are from 201 to a new plaza at 271, 
from 271 to 341 (also a new plaza), and from 341 to the existing plaza at 411.

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.