// CORRECT, MAXIMIZING BINARY SEARCH OVER INTEGER RANGE

class RaceTrack {
public:

bool check(int minSep, int n, vector<int> v, string& r)
{
	int nPos = v.size();
	
	string t = string(nPos, '0');
	t[0] = '1';
	int p = 0;
	for (int i = 1; i < n; i++)
	{
		int  j = p+1;
		while (j < nPos && v[j]-v[p] < minSep)
			j++;
		if (j == nPos)
			return false;
		t[j] = '1'; 
		p = j;
	}
	r = t;
	return true;
}

string judgePositions(int length, int judges, vector <int> pos) 
{

	int low = 1, high = length+1;
	// MAXIMIZING binary search
	
	// Invariant: low always satisfies condition, high does not satisfy condition
	
	string r;
	check(low, judges, pos, r); // initialize r for "low". Very important.
	while (high-low > 1)
	{
		int middle = (low+high)/2;
		if (check(middle, judges, pos, r))	// Make sure this function does not change "r" unless it is returning true.
		{
			low = middle; // maintain invariant
		}
		else
		{
			high = middle; // maintain invariant
		}
	}
	
	return r; // r corresponds to the largest legal value of "low". Loop ends when high=low+1. High is invalid, low is the largest valid value.
			  // Also useful if we want to find the FIRST value which is invalid (in this case, High).
}



//Powered by [KawigiEdit]



Problem Statement
    
A race track is represented as a line segment. You are given its length, and a vector <int> pos containing the positions where judges may be located. Each element of pos is the distance from the starting point of the race track. The elements of pos are given in strictly increasing order (pos[i] < pos[i+1]).
You are given an int judges, the number of judges in the next competition. You must assign the judges to positions such that the distance between the two closest judges is as large as possible. Return a string containing exactly n characters, where n is the number of elements in pos. The i-th character should be '1' (one) if there is a judge assigned to the i-th position, and '0' (zero) if there is not. The judges are lazy and don't want to go far from the starting point, so if there are multiple optimal solutions, return the one that comes latest lexicographically.
Definition
    
Class:
RaceTrack
Method:
judgePositions
Parameters:
int, int, vector <int>
Returns:
string
Method signature:
string judgePositions(int length, int judges, vector <int> pos)
(be sure your method is public)
    

Constraints
-
length will be between 1 and 1000000, inclusive.
-
pos will contain between 2 and 50 elements, inclusive.
-
Each element of pos will be greater than the previous, if it exists.
-
Each element of pos will be between 0 and length, inclusive.
-
judges will be between 2 and number of elements in pos, inclusive.
Examples
0)

    
11
3
{0, 5, 10, 11}
Returns: "1110"
Another solution that maximizes the distance between the two closest judges is "1101", but it is not the lexicographically latest.
1)

    
11
2
{0, 5, 10, 11}
Returns: "1001"
The distance between the two judges should be as large as possible.
2)

    
11
4
{0, 5, 10, 11}
Returns: "1111"
The judges do not have any choice.
3)

    
1000
5
{6, 9, 33, 59, 100, 341, 431, 444, 565, 857}
Returns: "1000010111"

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.