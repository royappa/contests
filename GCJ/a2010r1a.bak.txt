#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>

using namespace std;
int debug = 0;
char buf[4096];

bool check(vector<string> &v, int K, char ch)
{
	int N = v.size();
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (check2(v, i, j, ch, -1,
	
string f(vector<string> &v, int K)
{
	int N = v.size();
	vector<string> w;
	for (int c = 0; c < N; c++)
	{
		string s = "";
		for (int r = N-1; r >= 0; r--)
		{
			s += v[r][c];
		}
		w.push_back(s);
	}
	// drop
	for (int c = 0; c < N; c++)
	{
		for (int r = N-1; r >= 0; r--)
		{
			int t = r;
			if (w[t][c] == '.') continue;
			while (t < N-1 && w[t+1][c] == '.')
			{
				swap(w[t][c], w[t+1][c]);
				t++;
			}
		}
	}
	bool red = check(w, K, 'R');
	bool blue = check(w, K, 'B');
	string s;
	if (red && blue)
	{
		s = "Both";
	}
	else if (red)
	{
		s = "Red";
	}
	else if (blue)
	{
		s = "Blue";
	}
	else
	{
		s = "Neither";
	}
	return s;
}			

int main()
{
	int T;
	cin >> T;
	for (int testCase = 0; testCase < T; testCase++)
	{
		int K, N;
		cin >> N >> K;
		vector<string> v;
		for (int i = 0; i < N; i++)
		{
			string s;
			cin >> s;
			v.push_back(s);
		}
		printf("Case #%d: %s\n", f(v, K).c_str());
	}
	return 0;
}
