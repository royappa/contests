int s[60][60];
int visited[60][60];
int rows, cols;
int contains[1000][1000];
int memo[60][60][1000];

void dfs(int r, int c, int number)
{
	if (r < 0 || r >= rows || c < 0 || c >= cols)
		return;
	if (visited[r][c])
		return;
	if (s[r][c] == '.')
		return;
	visited[r][c] = 1;
	s[r][c] = 1000+number;
	for (int dr = -1; dr <= 1; dr++)
	{
		for (int dc = -1; dc <= 1; dc++)
		{
			if (dr == 0 && dc == 0) continue;
			dfs(r+dr, c+dc, number);
		}
	}
}

int canReachOutsideWithoutCrossing(int r, int c, int island)
{
	if (r < 0 || r >= rows || c < 0 || c >= cols)
		return true;
	if (s[r][c] == 1000+island)
		return false;
		
	int& res = memo[r][c][island];
	if (res != -1)
		return res;
	
	res = 0;
	int d[] = {-1,0, 0,1, 1,0, 0,-1};
	for (int i = 0; i < 4; i++)
	{
		int dr = d[2*i], dc = d[2*i+1];
		if (canReachOutsideWithoutCrossing(r+dr, c+dc, island))
		{
			res = 1;
			break;
		}
	}
	return res;
}

vector <int> howManyIslands(vector <string> seaMap) 
{
	
	
	rows = seaMap.size();
	cols = seaMap[0].size();
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			s[i][j] = seaMap[i][j];
		}
	}
	
	int number = 0;
	memset(visited, 0, sizeof(visited));
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (s[i][j] == 'x')
			{
				dfs(i, j, number);
				number++;
			}
		}
	}
	cout << number << endl;
	vector<int> result;
	if (number == 0)
		return result;
		
	map<int, set< pair<int,int> > > islands;
	memset(contains, 0, sizeof(contains));
	
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			int num = s[i][j]-1000;
			islands[num].insert(make_pair(i, j));
		}
	}
	
	memset(memo, -1, sizeof(memo));
	
	for (int i = 0; i < number; i++)
	{
		for (int j = 0; j < number; j++)
		{
			if (i == j) continue;
			if (contains[j][i]) continue; 
			// check if i contains j
			set< pair<int,int> > jp = islands[j];
			int can = 1;
			for (typeof(jp.begin()) it = jp.begin(); it != jp.end(); it++)
			{
				if (canReachOutsideWithoutCrossing(it->first, it->second, i)) // can reach outside from j, without crossing i?
				{
					can = 0;
					break;
				}
			}
			contains[i][j] = can;
		}
	}

	map<int, int> level;
	int done = 0;
	for (int i = 0; i < number; i++)
	{
		int numContains = 0;
		for (int j = 0; j < number; j++)
		{
			numContains += contains[i][j];
		}
		if (numContains == 0)
		{
			level[i] = 0;
			done++;
		}
	}
	result.push_back(done);
	int L = 0;
	while (done < number)
	{
		L++;
		int t = 0;
		for (int i = 0; i < number; i++)
		{
			if (level.count(i) > 0) continue;
			int found = 0, bad = 0;
			for (int j = 0; j < number; j++)
			{
				if (contains[i][j] && level.count(j) > 0 && level[j] == L-1)
				{
					found = 1;
				}
				else if (contains[i][j] && level.count(j) == 0)
				{
					bad = 1;
				}
			}
			if (found && !bad)
			{
				level[i] = L;
				t++;
			}
		}
		result.push_back(t);
		done += t;
	}
	return result;		
}

Problem Statement
    
Bob's father bought him a toy map of islands and seas. The map is a two-dimensional grid where each cell is either 'x' or '.'. 

A sea is defined as a maximal connected group of '.' cells, where two '.' cells are connected if they are vertically or horizontally adjacent. 

An island is defined as a maximal connected group of 'x' cells, where two 'x' cells are connected if they are vertically, horizontally, or diagonally adjacent. 

An island has a level of 0 if it contains no other islands. 

An island has a level of K+1 if it contains one or more islands and the highest level of a contained island is K. 

An island A contains island B if A and B are different and, if you start sailing from any point of island B, you won't be able to sail out of island A 
(you can sail only horizontally and vertically, but not diagonally).


For example, the given map below has 5 islands with level 0 (islands 0 - 4 on the right picture) and one island with level 1 (island 5). Please note that starting at island 3, you can not sail outside island 5 (you can not sail diagonally), but its possible get out of island 1 when starting at island 4.
xxx.x...xxxxx        000.0...11111
xxxx....x...x        0000....1...1
........x.x.x        ........1.4.1
..xxxxx.x...x        ..55555.1...1
..x...x.xxx.x        ..5...5.111.1
..x.x.x...x..        ..5.3.5...1..
..x...x...xxx        ..5...5...111
...xxxxxx....        ...555555....
x............        2............

Given a String[] seaMap, return a int[], where the k-th element is the number of islands of level k. 

The int[] must contain exactly m elements, where m is the highest level of an island in the map.

Definition
    
Class:
LandAndSea
Method:
howManyIslands
Parameters:
vector <string>
Returns:
vector <int>
Method signature:
vector <int> howManyIslands(vector <string> seaMap)
(be sure your method is public)
    

Constraints
-
seaMap will contain between 1 and 50 elements, inclusive.
-
Each element of seaMap will contain between 1 and 50 characters, inclusive.
-
Each element of seaMap will contain the same number of characters.
-
Each element of seaMap will contain only '.' and lowercase 'x' characters.
Examples
0)

    
{"x"}
Returns: {1 }

1)

    
{
"xxxxx",
"x...x",
"x.x.x",
"x...x",
"xxxxx"
}
Returns: {1, 1 }

2)

    
{
"xxxxx",
"x...x",
"x.x.x",
"x...x",
"xxxxx",
"xxxxx",
"x...x",
"x.x.x",
"x...x",
"xxxxx"
}
Returns: {2, 1 }

3)

    
{
"..",
".."
}
Returns: { }

4)

    
{
"............",
".......xxxx.",
"..xxx.x...x.",
"..x..x..x.x.",
"..x.x.x...x.",
"..xx...xxx.."
}
Returns: {1, 1 }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.