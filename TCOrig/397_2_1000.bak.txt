int cap, n;
int memo[9000][21][11];
vector<int> w;

// return the most marbles you can get given that you already have those in "mask", one partial bag left and some full bags left
int f(int mask, int part, int full) 
{
	int& r = memo[mask][part][full];
	if (r != -1)
		return r;
		
	r = __builtin_popcount(mask);
	for (int i = 0; i < n; i++)
	{
		if ((mask & (1<<i)) == 0)
		{
			if (part >= w[i])
			{
				r >?= f(mask|(1<<i), part-w[i], full);
			}
			if (full > 0 && w[i] <= cap)
			{
				r >?= f(mask|(1<<i), cap-w[i], full-1);
			}
		}
	}
	return r;
}
	
int mostMarbles(vector <int> marblesWeights, int bagCapacity, int numberOfBags) 
{
	cap = bagCapacity;
	w = marblesWeights;
	n = w.size();
	
	memset(memo, -1, sizeof(memo));
	return f(0, bagCapacity, numberOfBags-1); 
}

Problem Statement
    
Maybe you don't know, but you are a fanatic of colored marbles. You want to collect them all, but you may not be able to carry them. 

You have numberOfBags bags, each of capacity bagCapacity grams. 

The i-th marble has a weight of marblesWeight[i] grams. 

You can go to the shop only once and you have enough money to buy all of the marbles. 

Return the largest number of marbles that you can carry home in the given bags.

Definition
    
Class:
CollectingMarbles
Method:
mostMarbles
Parameters:
vector <int>, int, int
Returns:
int
Method signature:
int mostMarbles(vector <int> marblesWeights, int bagCapacity, int numberOfBags)
(be sure your method is public)
    

Constraints
-
marblesWeights will contain between 1 and 13 elements, inclusive.
-
Each element of marblesWeights will be between 1 and 20, inclusive.
-
bagCapacity will be between 1 and 20, inclusive.
-
numberOfBags will be between 1 and 10, inclusive.
Examples
0)

    
{ 2, 2, 2, 2, 2 }
5
2
Returns: 4
We have 5 marbles, all weighting 2 grams and 2 bags with capacity of 5 grams each. We can put no more then 2 marbles into each bag.
1)

    
{ 1, 3, 5, 2, 4 }
5
2
Returns: 4
We can carry home marbles with weights 1, 2, 3 and 4.
2)

    
{ 7, 6, 6, 5 }
12
2
Returns: 4
We have enough space for all marbles.
3)

    
{ 2, 2, 2 }
1
10
Returns: 0
Here, we can't take anything.

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.