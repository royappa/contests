
typedef long long LL;

LL f(vector<int> A, LL X)
{
	LL sum = 0;
	for (int i = 0; i < A.size(); i++)
	{
		sum += llabs(abs(A[i]-X));
	}
	return sum;
}

LL find1(vector<int> A, LL M, LL P)
{
	LL lo = M;
	LL hi = 1LL<<60;
	// invariant: f(lo) < P, f(hi) >= P
	while (hi != lo+1)
	{
		LL mid = (lo+hi)/2;
		if (f(mid) >= P)
		{
			hi = mid;
		}
		else
		{
			lo = mid;
		}
	}
	return hi;	
}

LL find2(vector<int> A, LL M, LL P)
{
	LL lo = M;
	LL hi = -(1LL<<60);
	// invariant: f(lo) < P, f(hi) >= P
	while (hi != lo-1)
	{
		LL mid = (lo+hi)/2;
		if (f(mid) >= P)
		{
			hi = mid;
		}
		else
		{
			lo = mid;
		}
	}
	return hi;
}

int countSolutions(vector <int> A, int P) 
{
	int n = A.size();
	sort(A.begin(), A.end());
	
	// define f(X) = |A0 - X| + |A1 - X| + ... + |AN-1 - X| 
	// let M1 = left median, M2 = right median (may be equal)
	// f(M) the minumum; (if there are two medians, it's the same for all X between the two, inclusive)
	// f(X) increases continuously to the right and left of X
	// find largest XL such that X < M1 and f(XL) >= P
	// find smallest XR such that X > M2 and f(XR) >= P
	// answer is number of integers in range (XL,XR)-n
	// special cases: 2 medians
	int M1, M2;
	if (n % 2 == 1)
	{
		M1 = M2 = A[n/2];
	}
	else
	{
		M1 = A[n/2];
		M2 = A[n/2+1];
	}
	if (f(M1) > P)
		return 0;	
	if (f(M1) == P)
		return n % 2 == 0 ? 2 : 1;
	LL XR = find1(A, M2, P);
	LL XL = find2(A, M1, P);
	if (f(XR) != P)
		XR--;
	if (f(XL) != P)
		XL++;
	return XR-XL+1;	
}

Problem Statement
    
You will be given a vector <int> A that contains N elements and an int P. Return the number of distinct integer values of X for which the following inequality is true:
|A0 - X| + |A1 - X| + ... + |AN-1 - X| = P

Definition
    
Class:
ModularInequality
Method:
countSolutions
Parameters:
vector <int>, int
Returns:
int
Method signature:
int countSolutions(vector <int> A, int P)
(be sure your method is public)
    

Constraints
-
A will contain between 1 and 50 elements, inclusive.
-
Each element of A will be between -1,000,000,000 and 1,000,000,000 inclusive.
-
P will be between 0 and 1,000,000,000 inclusive.
Examples
0)

    
{1, 2, 3}
6
Returns: 5
The possible values for X are 0, 1, 2, 3 and 4.
1)

    
{10, 30, 15, -1, 17}
42
Returns: 7

2)

    
{0, 2, 3, -5, 10}
17
Returns: 0

3)

    
{-693}
1265
Returns: 2531

4)

    
{965, -938, -396, -142, 926, 31, -720}
6495
Returns: 1781

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.