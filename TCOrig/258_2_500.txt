
// try AHAHAHAHAHKHAHAHAHAHAKAHAHAHAHAHKHAHAHAHAHA  
// 31
string orig;

int memo[51][51];
int n, p, q;

int shortest(int a, int len)
{
	if (len <= 3)
	{
		if (len == 3)
		{
			char ch0 = orig[a], ch1 = orig[a+1], ch2 = orig[a+2];
			if ( (ch0 == orig[p] && ch1 == orig[p+1] && ch2 == orig[p+2]) ||
				 (ch0 == orig[q] && ch1 == orig[q+1] && ch2 == orig[q+2]))
			return 2;
		}
		return len;
	}
	int &x = memo[a][len];
	if (x != -1)
	{
		return x;
	}
	x = -1;
	for (int i = a; i < a+len-2; i++)
	{
		// try p at i
		int pre = shortest(a, (i-1)-a+1);
		int rest = shortest(i+3, len-( (i-1)-a+1)-3);
		int z = pre+3+rest;
		x = x == -1 ? z : min(x, z);
		if (orig[i] == orig[p] && orig[i+1] == orig[p+1] && orig[i+2] == orig[p+2])
		{
			int z = 2+pre+rest;
			x = min(z, x);
		}
		// try q at i
		if (orig[i] == orig[q] && orig[i+1] == orig[q+1] && orig[i+2] == orig[q+2])
		{
			int z = 2+pre+rest;
			x = min(z, x);
		}	
	}
	return x;
}
	
int shortestLength(string _orig) 
{

	orig = _orig;
	
	n = orig.size();
				
	int best = n;	
	for (p = 0; p < n-2; p++)
	{
		// suppose we pick p..(p+2) as the first string
		for (q = 0; q < n-2; q++)
		{
			// and we want to pick q..(q+2) as the second string 
			memset(memo, -1, sizeof(memo));			
			int cand = shortest(0, n);
			best = min(best, cand);
		}
	}
	return best;			
}

Problem Statement
    
You are part of a team that is working on a piece of software to handle text compression. Your team has designed the compression algorithm as follows:


To compress a given string of text, two substrings, each 3 characters in length, will be chosen as compression keys. 

The substrings may contain any combination of capital letters and/or spaces. 

Then, a compressed string will be generated from the original such that replacing "*1" in the compressed string with the first substring and replacing "*2" with the second substring will recreate the original text.

For example, if the two compression keys are "FOO" and "BAR", then the compressed string "*2X*1" would decompress to "BARXFOO", and "*1*1 *2" would decompress to "FOOFOO BAR".

You have been tasked with writing a proof of concept implementation to test the effectiveness of this compression scheme. You will be given a string original. Your goal is to optimally select the two compression keys, and generate the compressed text to be as short as possible. You are to return the length of the shortest possible text.
Definition
    
Class:
CompressionText
Method:
shortestLength
Parameters:
string
Returns:
int
Method signature:
int shortestLength(string original)
(be sure your method is public)
    

Constraints
-
original will contain between 1 and 50 characters, inclusive.
-
Each character of original will be an uppercase letter ('A'-'Z') or a space (' ').
Examples
0)

    
"BARXFOO"
Returns: 5
The first example from the problem statement.
1)

    
"FOOFOO BAR"
Returns: 7
The second example from the problem statement.
2)

    
"ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWXY"
Returns: 46
It's a long string, but no 3-character substring appears more than twice.
3)

    
"QWERTYUIOPASDFGHJKLZXCVBNM"
Returns: 24
Here, no substring repeats itself at all. The best we can do is to pick any two substrings to replace.
4)

    
"BBAAAABBBBAAABABABBBABABAAABABABAAABBAABABBBABAAAB"
Returns: 40

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.