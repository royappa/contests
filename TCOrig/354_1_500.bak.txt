
int visited[1000000];
int q[2000000];

int findMaximum(int N) 
{
	if (N == 1000000 || N < 10)
		return N;

	int dig[10];
	
	memset(visited, 0, sizeof(visited));
	
	int qn = 0, qh = 0, qt = 0;
	q[qt++] = N;
	visited[N] = 1;
	qn++;
	while (qn > 0)
	{
		int top = q[qh++];
		qn--;
		int num = 0;
		int tmp = top;
		while (tmp > 0)
		{
			dig[num++] = tmp % 10;
			tmp /= 10;
		}
		if (num <= 1)
			continue;
		for (int i = 0; i < num; i++)
		{
			for (int j = i+1; j < num; j++)
			{
				if (dig[i] > 0 && dig[j] > 0)
				{
					swap(dig[i], dig[j]);
					int t = 0;
					for (int k = num-1; k >= 0; k--)
					{
						t = t*10+dig[k];
					}
					if (!visited[t])
					{
						visited[t] = 1;
						q[qt++] = t;
						qn++;
					}
				}
			}
		}
	}
		
		
	char buf[100];
	sprintf(buf, "%d", N);
	string s = buf;
	int len = s.size();
	
	string tmp(len);
	for (int i = 0; i < len; i++)
	{
		tmp[i] = '9';
	}
	int most = atoi(tmp.c_str());
	
	for (int i = most; i >= N; i--)
	{
		if (visited[i])
		{
			return i;
		}
	}
	
}

Problem Statement
    
You are given an integer N, and you are allowed to perform the following operation: 
take two nonzero digits of N, decrease each of them by one and swap the resulting digits. 

For example, if N is 166, you can reach the following numbers in one operation: 
506 (swap '1' and the first '6'), 
155 (swap the '6's) and 
560 (swap '1' and the last '6'). 

You are allowed to perform the operation zero or more times consecutively. Return the largest number you can reach.

Definition
    
Class:
RemissiveSwaps
Method:
findMaximum
Parameters:
int
Returns:
int
Method signature:
int findMaximum(int N)
(be sure your method is public)
    

Constraints
-
N will be between 1 and 1,000,000, inclusive.
Examples
0)

    
166
Returns: 560
The example from the problem statement.
1)

    
3499
Returns: 8832
The following sequence of operations is optimal: 3499 -> 8492 -> 8832.
2)

    
34199
Returns: 88220
The following sequence of operations is optimal: 34199 -> 84129 -> 88123 -> 88220.
3)

    
809070
Returns: 809070
No operations can increase the number.

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.