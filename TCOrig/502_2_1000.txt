#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TheCowDivTwo {
public:

#define MOD 1000000007

// we can't declare an array f[10001][48][1000] like we need to
// but in the recurrence relation, f[p][][] only depends on f[p-1][][]
// so we only need to store 2 slices and keep swapping between them

int f[2][48][1000];

int find(int N, int K) 
{
	   
    for (int p = 1; p <= N; p++)
    {
    	for (int s = 0; s <= K; s++)
    	{
    		for (int r = 0; r < N; r++)
    		{
    			int val;
    			if (p < s)
    			{
 					val = 0;
 				}
 				else if (s == 0)
 				{
 					val = r == 0 ? 1 : 0;
 				}
 				else if (s == 1)
 				{
 					val = r < p ? 1 : 0;
 				}
 				else
 				{
    				int m = r-(p-1);
    				m = ((m+N)%N+N)%N;
    				// the recurrence is f[p][s][r] = f[p-1][s-1][m]+f[p-1][s][r]
    				val = (f[(p-1)%2][s-1][m]+f[(p-1)%2][s][r])%MOD;
    			}
    			f[p%2][s][r] = val;
    		}
    	}
    }
    return f[N%2][K][0];
}

};

Problem Statement
    
Farmer John had N cows numbered 0 to N-1. One day he saw K cows running away from his farm. Fox Brus computed the sum of the numbers of the escaped cows. She only told John that the sum was divisible by N.  Your task is to help John by counting the number of possible sets of escaped cows. This number may be very big, so return it modulo 1,000,000,007.
Definition
    
Class:
TheCowDivTwo
Method:
find
Parameters:
int, int
Returns:
int
Method signature:
int find(int N, int K)
(be sure your method is public)
    

Constraints
-
N will be between 1 and 1,000, inclusive.
-
K will be between 1 and 47, inclusive.
-
K will be less than or equal to N.
Examples
0)

    
7
4
Returns: 5
7 cows are numbered 0 to 6 and 4 of them run away. Possible sets of escaped cows are {0, 1, 2, 4}, {0, 3, 5, 6}, {1, 2, 5, 6}, {1, 3, 4, 6}, {2, 3, 4, 5}.
1)

    
1
1
Returns: 1

2)

    
58
4
Returns: 7322

3)

    
502
7
Returns: 704466492

4)

    
1000
47
Returns: 219736903

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.