#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class NiceOrUgly {
public:
bool isVow(char ch) { return string("AEIOU").find(ch) != string::npos; }
string s;
int n, umemo[60][60][60], nmemo[60][60][60];

// return true if we can make ugly by some substitution
bool fu(int p, int cv, int cc)
{
	if (cv == 3 || cc == 5)
	{
		return true;
	}
	
	if (p == n)
	{
		return false;
	}
	int& r = umemo[p][cv][cc];
	if (r != -1)
		return r;
	
	r = 0;
	if (s[p] == '?')
		r = fu(p+1, cv+1, 0) || fu(p+1, 0, cc+1);
	else if (isVow(s[p])) 
		r = fu(p+1, cv+1, 0);
	else
		r = fu(p+1, 0, cc+1);
	return r;
}

// return true if we can make nice by some substitution
bool fn(int p, int cv, int cc)
{
	if (cv == 3 || cc == 5)
	{
		return false;
	}
	
	if (p == n)
	{
		return true;
	}
	int& r = nmemo[p][cv][cc];
	if (r != -1)
		return r;
	
	r = 0;
	if (s[p] == '?')
		r = fn(p+1, cv+1, 0) || fn(p+1, 0, cc+1);
	else if (isVow(s[p])) 
		r = fn(p+1, cv+1, 0);
	else
		r = fn(p+1, 0, cc+1);
	return r;
}

string describe(string s_) 
{
	/*
	CAN_U =  can make ugly? y/n
	CAN_N = .. can make nice? y/n
	
	CAN_U CAN_N
	N		N -> can never happen
	N		Y -> NICE
	Y		N -> UGLY
	Y		Y -> 42
	*/
	s = s_;
	n = s.size();
	memset(umemo, -1, sizeof(umemo));
	memset(nmemo, -1, sizeof(nmemo));
	
	bool canu = fu(0, 0, 0);
	bool cann = fn(0, 0, 0);
	return (!canu && cann) ? "NICE" :
		   (canu && !cann) ? "UGLY" :
		   "42";
}
};


//Powered by [KawigiEdit]

Problem Statement
    
A string is called ugly if it has 3 vowels in a row, or 5 consonants in a row, or both. A string is called nice if it is not ugly. You are given a string s, consisting of uppercase letters ('A'-'Z') and question marks ('?'). Return "UGLY" if the string is definitely ugly (that means you cannot substitute letters for question marks so that the string becomes nice), "NICE" if the string is definitely nice, and "42" if it can be either ugly or nice (quotes for clarity only).
Definition
    
Class:
NiceOrUgly
Method:
describe
Parameters:
string
Returns:
string
Method signature:
string describe(string s)
(be sure your method is public)
    

Notes
-
The letters 'A', 'E', 'I', 'O', 'U' are vowels, and all others are consonants.
Constraints
-
s will contain between 1 and 50 characters, inclusive.
-
Each character in s will be either '?', or an uppercase letter ('A'-'Z').
Examples
0)

    
"HELLOWORLD"
Returns: "NICE"

1)

    
"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Returns: "UGLY"
Apparently the English alphabet has 5 consonants in a row.
2)

    
"HELLOW?RLD"
Returns: "42"
"HELLOWORLD" is nice, "HELLOWZRLD" is ugly.
3)

    
"H??LOWOR??"
Returns: "NICE"
You just can't make it ugly.
4)

    
"EE?FFFF"
Returns: "UGLY"
Whatever you put there, it becomes ugly.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.