typedef struct { int x1, y1, x2, y2; } Rect;
vector<Rect> r;
vector<int> v(4);
#define MAX (1<<30)

int intersect(int a1, int b1, int a2, int b2)
{
	if (a2 <= a1)
	{
		if (b2 <= a1)
		{
			return 0;
		}
		else if (b2 <= b1)
		{
			return b2-a1;
		}
		else
		{
			return b1-a1;
		}
	}
	else if (a2 <= b1)
	{
		if (b2 <= b1)
		{
			return b2-a2;
		}
		else
		{
			return b1-a2;
		}
	}
	else
	{
		return 0;
	}
}

int intersectV(int a, int b)
{
	if (r[b].y1 < r[a].y2)
		return 0;
	
	return intersect(r[a].x1, r[a].x2, r[b].x1, r[b].x2);
}

int intersectH(int a, int b)
{
	if (r[b].x1 < r[a].x2)
		return 0;
	return intersect(r[a].y1, r[a].y2, r[b].y1, r[b].y2);
}

bool test(int a, int b, int c, int d)
{
	
	// sort vertically from bottom to top, by top edge
	v[0] = a;
	v[1] = b;
	v[2] = c;
	v[3] = d;
	int L = 0;
	for (int i = 0; i < 4; i++)
	{
		if (r[v[i]].y2 < r[v[L]].y2)
		{
			L = i;
		}
	}
	int H = 0;
	for (int i = 0; i < 4; i++)
	{
		if (r[v[i]].y1 > r[v[i]].y1)
		{
			H = i;
		}
	}
	int w = intersectV(v[L], v[H]);
	
	int A = 0;
	for (int i = 0; i < 4; i++)
	{
		if (r[v[i]].x2 < r[v[A]].x2)
		{
			A = i;
		}
	}
	
	int B = 0;
	for (int i = 0; i < 4; i++)
	{
		if (r[v[i]].x1 > r[v[B]].x1)
		{
			B = i;
		}
	}
	int h = intersectH(v[A], v[B]);
	return w*h > 0;
}

	
string interiorPoint(vector <string> rectangles) 
{
	int n = rectangles.size();

	r.clear();
	for (int i = 0; i < rectangles.size(); i++)
	{
		Rect s;
		sscanf(rectangles.c_str(), "%d %d %d %d", &s.x1, &s.y1, &s.x2, &s.y2);
		r.push_back(s);
	}
	
	for (int i = 0; i < n; i++)
	{
		for (int j = i+1; j < n; j++)
		{
			for (int k = j+1; k < n; k++)
			{
				for (int l = k+1; l < n; l++)
				{
					if (test(i, j, k, l))
						return "YES";
				}
			}
		}
	}
	return "NO";
	
}
Problem Statement
    
There are some rectangles on a plane. 

Determine whether a point exists such that above, below, to the left, and to the right of the point lies an interior point of a rectangle. 

This point must not lie inside or on the boundary of any of the given rectangles.

You are given a vector <string> rectangles, each element of which is formatted as "X1 Y1 X2 Y2", where X1 and Y1 are the coordinates of the lower left corner of a rectangle, and X2 and Y2 are the coordinates of the upper right corner. 

You are to return a string, "YES" if such a point exists and "NO" otherwise.

Definition
    
Class:
OneMorePoint
Method:
interiorPoint
Parameters:
vector <string>
Returns:
string
Method signature:
string interiorPoint(vector <string> rectangles)
(be sure your method is public)
    

Notes
-
Point A(xa, ya) is above point B(xb, yb) if xa = xb and ya > yb.
-
Point A(xa, ya) is below point B(xb, yb) if xa = xb and ya < yb.
-
Point A(xa, ya) is to the left of point B(xb, yb) if xa < xb and ya = yb.
-
Point A(xa, ya) is to the right of point B(xb, yb) if xa > xb and ya = yb.
Constraints
-
rectangles will contain between 0 and 50 elements, inclusive.
-
Each element of rectangles will be formatted as "X1 Y1 X2 Y2".
-
X1, Y1, X2, and Y2 will each be an integer between 0 and 10000, inclusive, with no extra leading zeros.
-
X2 will be greater than X1, and Y2 will be greater than Y1.
Examples
0)

    
{"0 0 2 1", "2 0 3 2", "1 2 3 3", "0 1 1 3"}
Returns: "YES"
 
The given rectangles are shown in grey in this figure. Any white point will meet our requirements.
1)

    
{"0 0 2 1", "2 0 3 2", "1 2 3 3", "0 1 1 3", "1 1 2 2"}
Returns: "NO"

2)

    
{"0 0 2 1", "3 0 4 2", "2 3 4 4", "0 2 1 3"}
Returns: "NO"

3)

    
{"0 0 100 1", "100 1 200 2", "0 0 1 100", "50 50 51 51"}
Returns: "YES"

4)

    
{"1 1 1000 1000"}
Returns: "NO"

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.