bool compatible(int w1, int w2, int w3, int l1, int l2, int l3, int ws, int ls)
{
	return (w1*3+w2*3+w3*3+l1*0+l2*1+l3*2 == ws) &&
		   (w1*0+w2*1+w3*2+l1*3+l2*3+l3*3 == ls);
}

string format(int w1, int w2, int w3, int l1, int l2, int l3, int ws, int ls)
{
	char buf[100];
	vector<int> v;
	v[0] = l1;
	v[1] = l2;
	v[2] = l3;
	v[3] = w1;
	v[4] = w2;
	v[5] = w3;
	int win[] = {0,1,2,3,3,3};
	int lose[]= {3,3,3,0,1,2};
	
	string r = "";
	for (int i = 0; i < v.size; i++)
	{
		if (v[i] > 0)
		{
			sprintf(buf, ",%d-%d", v[i]*win(i), v[i]*lose(i));
		}
	}
	string r = buf;
	return r.substr(1);
}

string reconstructResults(int wonMatches, int lostMatches, int wonSets, int lostSets) 
{
	string result = "";
	for (int i = 0; i <= wonMatches; i++)
	for (int j = 0; j <= wonMatches-i; j++)
	for (int k = 0; k <= wonMatches-i-j; k++)
	for (int x = 0; x <= lostMatches; x++)
	for (int y = 0; y <= lostMatches-x; y++)
	for (int z = 0; z <= lostMatches-x-y; z++)
	{
		if (compatible(i, j, k, x, y, z, wonSets, lostSets))
		{
			if (result != "")
				return "AMBIGUITY";
			result = format(i, j, k, x, y, z, wonSets, lostSets);
		}
	}
	return result;
}
Problem Statement
    
The common method to print the standings for a volleyball tournament is to print the number of won matches, the number of lost matches, the number of won sets, and the number of lost sets for each team.
Each match consists of three to five sets, where each set is won by one of the teams. The first team to win three sets is declared the winner of the match.
You are given one row of the standings table. That is, you are given an int wonMatches, denoting the number of matches won by a team, an int lostMatches, denoting the number of matches lost by that team, an int wonSets, denoting the total number of sets won by that team, and an int lostSets, denoting the total number of sets lost by that team. These numbers represent a possible tournament outcome for a team, and you are to reconstruct the results of all matches for that team, and return them as a comma-separated list, sorted lexicographically. Each match in the list must be formatted as the number of sets won by the team, followed by a dash ('-'), followed by the number of sets lost by the team. The possible outcomes for a match are "0-3", "1-3", "2-3", "3-0", "3-1", and "3-2" (all quotes for clarity only). If multiple different result sets are possible (sets that are reorderings of each other are not considered different), return "AMBIGUITY" (quotes for clarity) instead.
Definition
    
Class:
VolleyballTournament
Method:
reconstructResults
Parameters:
int, int, int, int
Returns:
string
Method signature:
string reconstructResults(int wonMatches, int lostMatches, int wonSets, int lostSets)
(be sure your method is public)
    

Notes
-
The returned string must not contain spaces.
Constraints
-
wonMatches and lostMatches will each be between 0 and 100, inclusive.
-
At least one of wonMatches and lostMatches will be greater than 0.
-
wonSets and lostSets will each be between 0 and 500, inclusive.
-
The numbers given will correspond to at least one possible result set.
Examples
0)

    
3
3
9
9
Returns: "0-3,0-3,0-3,3-0,3-0,3-0"

1)

    
0
3
6
9
Returns: "2-3,2-3,2-3"

2)

    
3
0
9
3
Returns: "AMBIGUITY"
It could have been "3-0,3-1,3-2" or "3-1,3-1,3-1".
3)

    
1
1
4
4
Returns: "1-3,3-1"

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.