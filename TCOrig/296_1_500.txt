
typedef vector<int> vi;
char *t[] = {"acb", "baa", "bcb"};
int len;

vi f(int start, int ca, int cb, int cc, int len, int ns)
{
	if (ns == 0)
	{
		vi v(3);
		v[0] = ca;
		v[1] = cb;
		v[2] = cc;
	}

	// in n seconds, a can grow to length 3^n
	// in n-1 seconds, a can grow to length 3^(n-1), namely 3^n/3
	if (len > 3^n)
	{
	
	}
	else if (len > (2/3)*(3^n))
	{
	}
	else if (len > (3^n)/3)
	{
	}
	else
	{ // len > 0)
		return f(start, ca, cb, cc, ns-1
	}
	
	
vi vsub(vi a, vi b)
{
	vi c(3,0);
	for (int i = 0; i < 3; i++)
	{
		c[i] = a[i]-b[i];
	}
	return c;
}

vector <int> substringCounter(string letter, int left, int right, int n) 
{
	vz.push_back(0);
	vz.push_back(0);
	vz.push_back(0);
	
	len1 = right+1, len2 = left;
	return vsub(f(letter[0]-'a', 0, n), f(letter[0]-'a', 0, n));	
}

""
a
acb
acb|bcb|baa
acb|bcb|baa,baa|bcb|baa,baa|acb|acb


Problem Statement
    
You are given a string that initially contains only a single letter. After every second of time, all occurrences of the letter 'a' are replaced with "acb", all occurrences of the letter 'b' are replaced with "baa", and all occurrences of the letter 'c' are replaced with "bcb". 

These replacements happen simultaneously during each second. You are given three ints: left, right, and nSeconds. 

Take the substring between positions left and right (both 0-based), inclusive, after nSeconds, and return a vector <int> containing exactly 3 elements. 

The first element is the number of 'a's in the substring, the second element is the number of 'b's, and the third element is the number of 'c's. 

For example, if letter = "a", then after 2 seconds, the string will be "acbbcbbaa". If left = 2 and right = 6, the substring is "bbcbb", which contains no 'a's, 4 'b's, and 1 'c'. Therefore, you will return {0, 4, 1}.
Definition
    
Class:
StringReplacements
Method:
substringCounter
Parameters:
string, int, int, int
Returns:
vector <int>
Method signature:
vector <int> substringCounter(string letter, int left, int right, int nSeconds)
(be sure your method is public)
    

Constraints
-
letter will be equal to "a", "b" or "c".
-
right will be between 0 and (3^nSeconds)-1, inclusive.
-
left will be between 0 and right, inclusive.
-
nSeconds will be between 0 and 20, inclusive.
-
left and right will each be less than or equal to 2147483647.
Examples
0)

    
"a"
2
6
2
Returns: {0, 4, 1 }
The example from the problem statement.
1)

    
"a"
0
2
1
Returns: {1, 1, 1 }
The resulting string will be "acb".
2)

    
"c"
1
4
2
Returns: {2, 1, 1 }

3)

    
"b"
4
12
3
Returns: {2, 4, 3 }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.