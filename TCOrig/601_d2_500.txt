#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

class PackingBallsDiv2 {
public:

int memo[101][101][101];

int f(int R, int G, int B)
{
	if (R+G+B == 0)
		return 0;
	else if (R+G+B == 1)
		return 1;
	else if (R+G+B == 2)
		return 1;
	int &r = memo[R][G][B];
	if (r != -1)
		return r;
	r = 1<<30;
	for (int t = 1; t <= 3; t++)
	{
		if (R >= t) 
			r = min(r, 1+f(R-t,G,B));
		if (G >= t)
			r = min(r, 1+f(R,G-t,B));
		if (B >= t)
			r = min(r, 1+f(R,G,B-t));
	}
	if (R >= 1 && G >= 1 && B >= 1)
		r = min(r, 1+f(R-1,G-1,B-1));
	if (R >= 1 && G >= 1)
		r = min(r, 1+f(R-1,G-1,B));
	if (R >= 1 && B >= 1)
		r = min(r, 1+f(R-1,G,B-1));
	if (G >= 1 && B >= 1)
		r = min(r, 1+f(R,G-1,B-1));

	return r;
}

	
	
int minPacks(int R, int G, int B) 
{
	memset(memo, -1, sizeof(memo));
	return f(R, G, B);	
}
};

<%:testing-code%>
//Powered by [KawigiEdit]