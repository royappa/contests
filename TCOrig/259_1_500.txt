int count[2500][26];

string goodnessSubstring(vector <string> ss) 
{
	string s = "";
	s = accumulate(ss.begin(), ss.end(), "");
	int n = s.size();
	
	memset(count, 0, sizeof(count));
	for (int i = 0; i < n; i++)
	{
		if (i > 0)
		{
			for (int j = 0; j < 26; j++)
			{
				count[i][j] = count[i-1][j];
			}
		}
		count[i][s[i]-'A']++;
	}
	
	//count[i][L] = number of times L occurs in 0..i
	
	//count[j][L]-count[i][L] = number of times L occurs in (i+1)..j ? 
	// time to check whether a substring of length N has goodness G: O(n*26)
	// do binary search on G in range 1..26
}


Problem Statement
    
We define the goodness of a string S as the number of letters that appear in S only once. For instance, the goodness of the string "CHALLENGE" is 5 because it contains 5 distinct letters 'C', 'H', 'A', 'N' and 'G'.
You are given a vector <string> superstring. superstring is split for convenience only, so you should concatenate all of its elements in order and treat it as a single string. You are to find the substring of superstring that has the maximal goodness. 

In case of a tie, return the substring that comes earliest alphabetically.

Definition
    
Class:
SuperString
Method:
goodnessSubstring
Parameters:
vector <string>
Returns:
string
Method signature:
string goodnessSubstring(vector <string> superstring)
(be sure your method is public)
    

Constraints
-
superstring will have between 1 and 50 elements, inclusive.
-
Each element of superstring will contain between 1 and 50 characters, inclusive.
-
Each element of superstring will contain uppercase letters ('A'-'Z') only.
Examples
0)

    
{"CHALLENGE"}
Returns: "CHALLENG"

1)

    
{"THEWORD"}
Returns: "THEWORD"

2)

    
{"THE", "MULTI", "LINE", "TEST"}
Returns: "HEMULTI"

3)

    
{"ZYXWVUTSRQPONMLKJIHGFEDCBA", "ZYXWVUTSRQPONMLKJIHGFEDCBA"}
Returns: "AZYXWVUTSRQPONMLKJIHGFEDCB"

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.