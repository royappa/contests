int n;
vector<int> x, y;
int memox[1<<20], memoy[1<<20], used[1<<20];
typedef long long LL;

void f(int mask, int& vx, int& vy)
{
	if (used[mask])
	{
		vx = memox[mask];
		vy = memoy[mask];
		return;
	}
	if (mask == (1<<n)-1)
	{
		vx = memox[mask] = 0;
		vy = memoy[mask] = 0;
		return;
	}
	bool firstTime = true;
	int bvx, bvy;
	for (int i = 0; i < n; i++)
	{
		for (int j = i+1; j < n; j++)
		{
			if ((mask & (1<<i)) == 0 && (mask & (1<<j)) == 0)
			{
				int rvx, rvy;
				f(mask|(1<<i)|(1<<j), rvx, rvy);
				int dx, dy;
				dx = x[j]-x[i];
				dy = y[j]-y[i];
				LL d2x, d2y;
				d2x = LL(dx+rvx)*LL(dx+rvx);
				d2y = LL(dy+rvy)*LL(dy+rvy);
				if (firstTime)
				{
					bvx = dx+rvx;
					bvy = dy+rvy;
					firstTime = false;
				}
				else
				{
					if (d2x+d2y < LL(bvx)*LL(bvx)+LL(bvy)*LL(bvy))
					{
						bvx = dx+rvx;
						bvy = dy+rvy;
					}
				}
				dx = x[i]-x[j];
				dy = y[i]-y[j];
				d2x = LL(dx+rvx)*LL(dx+rvx);
				d2y = LL(dy+rvy)*LL(dy+rvy);
				if (d2x+d2y < LL(bvx)*LL(bvx)+LL(bvy)*LL(bvy))
				{
					bvx = dx+rvx;
					bvy = dy+rvy;
				}
			}
		}
	}
	memox[mask] = vx = bvx;
	memoy[mask] = vy = bvy;
	used[mask] = true;
	return;			
}			

double minimumLength(vector <int> x_, vector <int> y_) 
{
	x = x_;
	y = y_;
	n = x.size();
	
	memset(used, 0, sizeof(used));
	
	int vx, vy;
	f(0, vx, vy);
	return sqrt(double(vx)*double(vx)+double(vy)*double(vy));
}

Problem Statement
    
Let P be a set of an even number of distinct points on the plane. A vector matching V of set P is a set of vectors where each vector starts at one point in P and ends at another, and each point in P is either the head or tail of exactly one vector in the matching. Thus, there are half as many vectors in V as there are points in P.

You are given vector <int>s x and y, where (x[i], y[i]) are the coordinates of the i-th point of P. Find a vector matching V for set P such that the length of the vector sum of the vectors in V is minimal, and return this length.
Definition
    
Class:
VectorMatching
Method:
minimumLength
Parameters:
vector <int>, vector <int>
Returns:
double
Method signature:
double minimumLength(vector <int> x, vector <int> y)
(be sure your method is public)
    

Notes
-
The sum of two vectors (x1, y1) and (x2, y2) is the vector (x1 + x2, y1 + y2).
-
A return value with either an absolute or relative error of less than 1.0E-9 is considered correct.
Constraints
-
x will contain between 2 and 20 elements, inclusive.
-
y will contain the same number of elements as x.
-
The number of elements in x will be even.
-
Each element of x and y will be between -100000 and 100000, inclusive.
-
All points will be distinct.
Examples
0)

    
{-5, -5, 5, 5}
{-5, 5, 5, -5}
Returns: 0.0
The optimal matching consists of vectors (-5, -5) -> (-5, 5) and (5, 5) -> (5, -5). It contains two opposite vectors, so their vector sum is the zero vector.
1)

    
{-100000, 100000}
{-100000, 100000}
Returns: 282842.71247461904

2)

    
{26, 65, 78, 92, -60, -27, 42, -86, 92, -41}
{-76, -83, 38, 22, -42, 85, 46, 98, -47, 38}
Returns: 13.341664064126334

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.