#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
#define 
class RadarFinder {
public:
typedef long long LL;
typedef long double d;

int possibleLocations(int x1_, int y1_, int r1_, int x2_, int y2_, int r2_) 
{
	LL x1 = x1_, y1 = y1_, x2 = x2_, y2 = y2_, r1 = r1_, r2 = r2_;
	
	if (x1 == x2 && y1 == y2 && r1 == r2)
		return -1;
	
	if (r1 < r2)
	{
		swap(x1, x2);
		swap(y1, y2);
		swap(r1, r2);
	}
	// r1 is bigger
	x2 -= x1;
	y2 -= y1;
	
	// circle 1: (0,0,r1); circle 2: (x2,y2,r2)
	
	LL d2 = S(x2)+S(y2);
	LD d = sqrt(double(d2));
	
	if (d2 <= S(r1)) // center of 2 is inside 1
	{
		LL di = LL(round(d));
		if (di+r2==r1)
			return 1;
		else if (di+r2 < r1)
			return 0;
		else
			return 2;
	}
	else // center outside
	{
		LL di = LL(round(d));
		if (di == r1+r2)
			return 1;
		else if (di < r1+r2)
			return 2;
		else
			return 0;
	}
}
};


//Powered by [KawigiEdit]


Problem Statement
    
You are the commander of a military operation that is focused on determining the location of an enemy unit. Two radar stations have provided measurements of their calculated distance from the enemy unit. You are given the locations of your radar stations in ints x1, y1 and x2, y2, and the calculated distances in ints r1 and r2, respectively.
You are to return an int indicating the number of possible locations of the enemy unit. If there are an infinite number of possible locations, return -1.
Definition
    
Class:
RadarFinder
Method:
possibleLocations
Parameters:
int, int, int, int, int, int
Returns:
int
Method signature:
int possibleLocations(int x1, int y1, int r1, int x2, int y2, int r2)
(be sure your method is public)
    

Constraints
-
x1 will be between -1000000000 and 1000000000, inclusive.
-
y1 will be between -1000000000 and 1000000000, inclusive.
-
r1 will be between 1 and 1000000000, inclusive.
-
x2 will be between -1000000000 and 1000000000, inclusive.
-
y2 will be between -1000000000 and 1000000000, inclusive.
-
r2 will be between 1 and 1000000000, inclusive.
Examples
0)

    
0
0
13
40
0
37
Returns: 2
The points (5, 12) and (5, -12) are the only points that are consistent with both radar measurements.
1)

    
0
0
3
0
7
4
Returns: 1
Only one point, (0, 3), is consistent with both measurements.
2)

    
0
0
5
10
10
3
Returns: 0
Perhaps one of the measurements was incorrect, since no points are consistent.
3)

    
0
0
1
0
0
1
Returns: -1
Getting two identical readings from the same location still leaves an unlimited number of possible locations.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.