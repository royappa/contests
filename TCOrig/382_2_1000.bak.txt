
int memo[60][1000];


int f(int k, int s, string good) // return number of numbers of length k which sum to s
{
	if (k == 1)
	{
		for (int i = 0; i < good.size(); i++)
		{
			if (good[i]-'0' == s)
				return 1;
		}
		return 0;
	}
	int& r = memo[k][s+100];
	if (r != -1)
		return r;
	
	r = 0;
	for (int i = 0; i < good.size(); i++)
	{
		r = (r + f(k-1, s-(good[i]-'0'), good)) % MOD;
	}
	return r;
}

int count(int K, string good) 
{
	memset(memo, -1, sizeof(memo));
	
	vector<int> num(K*9+1, 0);
	for (int s = 0; s <= K*9; s++)
	{
		num[s] = f(K, s, good);
		cout << K << " " << s << " " << good << " = " << num[s] << endl;
	}

	int dbl = 0;
	for (int s = 0; s <= K*9; s++)
	{
		for (int t = 0; t <= K*9; t++)
		{	
			if (s == t)
				dbl = (dbl + num[s]*num[t])%MOD;
		}
	}

	int p = 1;
	for (int i = 0; i < K; i++)
	{
		p = (p * good.size()) % MOD;
	}
cout << dbl << " " << p << endl;
	return (((2*dbl)%MOD - p)+MOD)%MOD;	
}


Problem Statement
    
A ticket number that contains exactly 2*K digits is called charming if and only if at least one of the following conditions is satisfied:

The sum of the first K digits is equal to the sum of the last K digits.

The sum of all the digits at positions with odd indices is equal to the sum of all the digits at positions with even indices.

Also, you think that some digits are better than others, so a charming number must contain only digits that you consider to be good. These digits are given in the string good. Determine the number of different charming numbers containing exactly 2*K digits. Return this number modulo 999983. 

Remember that ticket numbers may contain leading zeroes.

Definition
    
Class:
CharmingTicketsEasy
Method:
count
Parameters:
int, string
Returns:
int
Method signature:
int count(int K, string good)
(be sure your method is public)
    

Constraints
-
K will be between 1 and 50, inclusive.
-
good will contain between 1 and 10 characters, inclusive.
-
good will contain only digits ('0' - '9').
-
All characters in good will be distinct.
Examples
0)

    
1
"0123456789"
Returns: 10
Only "XX" numbers are charming.
1)

    
2
"21"
Returns: 8
Only 1111, 1122, 1212, 1221, 2112, 2121, 2211, 2222 are charming numbers.
2)

    
2
"0123456789"
Returns: 1240

3)

    
10
"731"
Returns: 207444

4)

    
50
"0123456789"
Returns: 367584

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.