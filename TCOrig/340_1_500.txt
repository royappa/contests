// CORRECT DYNAMIC PROGRAMMING WITH SAVE AND RECONSTRUCT/REBUILD THE PATH TO SOLUTION AND ALSO IMPLICITLY TRACKING WHAT WAS DONE
typedef vector<int> vi;
static const int INF = (1<<30);

vi tv, pv, expire;
int skillBound;
int n;
int memo[60][60][60];
int took[60][60][60];

int f(int month, int ts, int ps)
{
	if (ts >= skillBound && ps >= skillBound)
	{
		return 0; 
	}
	if (month == n)
	{
		return INF; // bound not reached and no more classes left
	}
	int& r = memo[month][ts][ps];
	if (r != -1)
		return r;
	
	r = INF; int besti = -1;
	for (int i = 0; i < n; i++) 
	{
		if (expire[i] > month && ts >= tv[i]-1 && ps >= pv[i]-1 && (tv[i] > ts || pv[i] > ps)) // The last clause here is why we don't need to pass a variable telling us which courses we have finished. By looking at ts,ps, we can tell if we've already done this course or not. I.e. we restrict ourselves to considering courses which give any benefit.
		{
			int r2 = f(month+1, max(ts,tv[i]), max(ps, pv[i]));
			if (r2 == INF)
				continue;
			if (r2+1 < r)
			{
				r = r2+1;
				besti = i;
			}
		}
	}
	took[month][ts][ps] = besti;
	return r;
}

vector<int> reconstruct()
{
	int ts = 0, ps = 0;
	vector<int> v;
	for (int i = 0; i < n; i++)
	{
		int course = took[i][ts][ps];
		ts = max(ts, tv[course]);
		ps = max(ps, pv[course]);
		v.push_back(course);
		if (ts >= skillBound && ps >= skillBound)
			break;
	}
	return v;
}
			
vector <int> getOrder(vector <int> tv_, vector <int> pv_, vector <int> expire_, int skillBound_) 
{
	tv = tv_;
	pv = pv_;
	expire = expire_;
	skillBound = skillBound_;
	n = tv.size();
	memset(memo, -1, sizeof(memo));
	int fewest = f(0, 0, 0); 
	vector<int> r;
	if (fewest == INF || fewest == 0)
	{
		return r;
	}
	r = reconstruct();
	return r;
}

Problem Statement
    
You are studying at a university, and there are many CS courses you can take. 
The i-th course is described by three values: theoreticalValue[i], practicalValue[i] and expire[i], where i is a 0-based index. 
Each course lasts one month, and you can not take the i-th course in the expire[i]-th month or later.

For each course i, let tvi = theoreticalValue[i] and pvi = practicalValue[i]. 

You can take the i-th course only if your theoretical skill is at least tvi-1 and your practical skill is at least pvi-1. 
If your theoretical skill is less than tvi, it will become tvi after you take the course. 
Similarly, if your practical skill is less than pvi, it will become pvi after you take the course.

Both your theoretical and practical skills are initially equal to 0, and you can start taking courses in the 0-th month. 
You can only take one class per month. Your goal is to have your theoretical and practical skills both be greater than or equal to skillBound. 

You want to achieve this by taking the fewest possible number of courses. 
Return a vector <int> containing the courses you should take, in order from earliest to latest. 
If there is no solution, return an empty vector <int>. 
If there are multiple solutions, return the one that comes earliest lexicographically. 
A vector <int> a1 comes before a vector <int> a2 lexicographically if a1 contains a smaller value at the earliest index at which they differ.

Definition
    
Class:
CsCourses
Method:
getOrder
Parameters:
vector <int>, vector <int>, vector <int>, int
Returns:
vector <int>
Method signature:
vector <int> getOrder(vector <int> theoreticalValue, vector <int> practicalValue, vector <int> expire, int skillBound)
(be sure your method is public)
    

Constraints
-
theoreticalValue will contain between 1 and 50 elements, inclusive.
-
theoreticalValue, practicalValue and expire will contain the same number of the elements.
-
Each element of theoreticalValue will be between 0 and 50, inclusive.
-
Each element of practicalValue will be between 0 and 50, inclusive.
-
Each element of expire will be between 0 and 50, inclusive.
-
skillBound will be between 0 and 50, inclusive.
Examples
0)

    
{1}
{1}
{1}
1
Returns: {0 }

1)

    
{1, 2, 1}
{2, 1, 1}
{5, 5, 5}
2
Returns: {2, 0, 1 }
You should take the courses in one of the following orders: {2, 0, 1} or {2, 1, 0}. The first one comes earlier lexicographically.
2)

    
{1, 2, 1}
{2, 1, 1}
{1, 1, 1}
2
Returns: { }
In the 0-th month, the only course you can take is course 2. However, after you complete the course, all three courses will expire.
3)

    
{1, 2, 1}
{2, 1, 1}
{3, 2, 1}
2
Returns: {2, 1, 0 }

4)

    
{1, 2, 3, 4, 5, 6, 7}
{1, 2, 3, 4, 5, 6, 7}
{1, 2, 3, 4, 5, 6, 7}
7
Returns: {0, 1, 2, 3, 4, 5, 6 }

5)

    
{0, 1, 2, 2, 1}
{0, 0, 1, 2, 1}
{9, 9, 9, 9, 9}
2
Returns: {4, 3 }
{0, 1, 2, 3} is a valid order, but we are looking for the fewest number of courses.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.