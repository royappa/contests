// WORKS - UNIQUE PRIME FACTORIZATION, UNIQUE FACTORIZATION, SIEVE OF ERATOSTHENES, DIVISORS
// Note: number of divisors of a prime factorizatoin p1^e1 * p2^e2 * p3^e3 = (1+e1)*(1+e2)*(1+e3)
// Note: when using the uniquePrimeFactorization routine, first check the problem to see if some 
// logic can be used to reduce the size of the things being factored (e.g. avoid doing a squaring operation until the end, etc.)
/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class PointsOnCircle {
public:
typedef unsigned long long LL;

typedef pair<LL,LL> pLL;

// This works in roughly O(sqrt(n)). It is NOT efficient for LL types (10^18) but good enough for unsigned int (4*10^9)
// This is just using LL to avoid using unsigned int. 
// CHECK the maximum sqrt(n) value before using
vector<pLL> uniquePrimeFactorization(LL n)  
{
	LL s = LL(ceil(sqrt(double(n))))+1;
	vector<LL> sieve(s, 1);
	for (LL i = 2; i < s; i++)
	{
		if (sieve[i])
		{
			LL q = i*i;
			while (q < s && sieve[q])
			{
				q += i;
			}
		}
	}
	// now "sieve" will tell us all primes up to sqrt(n)
	vector<pLL> res;
	for (LL p = 2; p < s; p++)
	{
		if (sieve[p] && n % p == 0) // p is prime divisor of n
		{
			int pe = 0;
			while (n % p == 0)
			{
				n /= p;
				pe++;
			}
			res.push_back(make_pair(p, pe));
		}
	}
	if (n > 1) // there could be one prime left that is larger than sqrt(n)
	{
		res.push_back(make_pair(n, 1));
	}
	return res;
}

long long count(int r) 
{
	if (r == 1)
		return 4;
	
	/* Sloane AA004019(n) = A004018(n^2)
	AA00418(n):
	Factor n as n = p1^a1 p2^a2 ... q1^b1 q2^b2 ... 2^c, 
	
	where the p's are primes == 1 mod 4, and the q's are primes == 3 mod 4. 
	Then a(n) = 0 if any b is odd, otherwise a(n) = 4 (1 + a1) (1 + a2) ... 
	*/

	LL n = r;
	while (n % 2 == 0)
		n /= 2LL;
	
	vector<pLL> v = uniquePrimeFactorization(n);
	
	LL p = 4;
	for (int i = 0; i < v.size(); i++)
	{
		int pf = v[i].first, pe = v[i].second;
		if (pf % 4 == 1)
			p *= (1+2*pe);
	}	
	return p;	
}
};


//Powered by [KawigiEdit]



//Powered by [KawigiEdit]
Problem Statement
    
You are given the radius r of a circle centered at the origin. 
Your task is to return the number of lattice points (points whose coordinates are both integers) on the circle. 
The number of pairs of integers (x, y) that satisfy x^2 + y^2 = n is given by the formula 4*(d1(n) - d3(n)), 
where di(n) denotes the number of divisors of n that leave a remainder of i when divided by 4.

Definition
    
Class:
PointsOnCircle
Method:
count
Parameters:
int
Returns:
long long
Method signature:
long long count(int r)
(be sure your method is public)
    

Constraints
-
r will be between 1 and 2*10^9, inclusive.
Examples
0)

    
1
Returns: 4
The only lattice points on the circle are (0, 1), (1, 0), (-1, 0), (0, -1).
1)

    
2000000000
Returns: 76

2)

    6^3 = 36 = 2*2*3*3
    1,2,3,4,6,9,12,18,36
    1 2 3 0 2 1  0  2  0
    4(2-1) 
3
Returns: 4
The number of lattice points on the circle of radius 3 is the same as the number of integer solutions of the equation x^2 + y^2 = 9. 
Using the formula from the problem statement we can calculate this number as 4*(d1(9) - d3(9)). It is easy to see that d1(9) = 2 (divisors 1 and 9) and d3(9) = 3 (divisor 3). So the answer is 4*(2 - 1) = 4.
3)

    
1053
Returns: 12

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.