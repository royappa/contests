#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
#define setbit(x,b) (x) |= (1<<(b))
#define flipbit(x,b) (x) ^= (1<<(b))

#define QS 1200000
int q[QS];
int dist[QS];
#define SHORT 65535

class CrazySwitches {
public:

int minimumActions(vector <int> switches) 
{
	int n = switches.size();
		
	memset(dist, -1, sizeof(dist));
	int qh = 0, qt = 0, qn = 0;
	int start = 1;
	int goal = ((n-1) << 16) | (1<<(n-1));
	q[qt++] = start;
	qn++;
	dist[start] = 0;
	int nbrs[4];
	while (qn > 0)
	{
		int head = q[qh];
		if (head == goal)
			return dist[goal];
		qh = (qh + 1) % QS;
		qn--;
		int pos = head >> 16;
		int state = head & SHORT;
		for (int r = 0; r < n; r++) // try moving to some other room
		{
			int k = 0;
			int here = switches[pos];
			int there = switches[r];
			int onhere = state & (1<<pos);
			int onthere = state & (1<<r);
			
			for (int s = 0; s < 4; s++)
			{
				int st = state;
				int fliphere = s&1, flipthere = s&2;
				if (fliphere && flipthere)
				{
					if (here == pos)
						continue;
					if ((!onthere && here != r) || (onthere && here == r))
						continue; // can't move into a dark room
					if (there == r)
						continue; // don't turn off there
					flipbit(st, here);
					flipbit(st, there);
					st |= (r << 16);
					nbrs[k++] = st;
				}
				else if (fliphere && !flipthere)
				{
					if (here == pos)
						continue;
					if ((!onthere && here != r) || (onthere && here == r))
						continue;
					flipbit(st, here);
					st |= (r << 16);
					nbrs[k++] = st;	
				}
				else if (!fliphere && flipthere)
				{
					if (!onthere)
						continue;
					if (there == r)
						continue;
					flipbit(st, there);
					st |= (r << 16);
					nbrs[k++] = st;	
				}
				else
				{
					if (!onthere)
						continue;
					st |= (r << 16);
					nbrs[k++] = st;
				}
			}
			for (int i = 0; i < k; i++)
			{
				int nbr = nbrs[i];
				if (nbr == goal)
				{
					return dist[head]+1;
				}
				if (dist[nbr] == -1) // not visited
				{
					int x = nbr >> 16;
					dist[nbr] = (x == pos ? dist[head] : dist[head]+1);
					q[qt] = nbr;
					qt = (qt + 1) % QS;
					qn++;
				}
			}
		}	
	}
	return -1;
	
}
};


//Powered by [KawigiEdit]

Problem Statement
    
You are in a house where the light in each room is controlled by a switch that might be located in a different room. 

Initially, the light in the first room is on, and the lights in all the other rooms are off.

You are currently in the first room and your goal is to end up in the last room, with all the lights in the house off except the light in the last room. You can move directly from any room to any other room, and you can turn any of the switches that are located in your current room. 
However, you may never enter a dark room or turn off the light in your current room.

You are given a vector <int> switches describing the locations of the light switches. The light switch for room i is located in room switches[i]. Rooms have 0-based indices. Return the minimal number of moves required to complete your task, or -1 if it is impossible. Only moving from one room to another counts as a move (turning a switch is not counted).
Definition
    
Class:
CrazySwitches
Method:
minimumActions
Parameters:
vector <int>
Returns:
int
Method signature:
int minimumActions(vector <int> switches)
(be sure your method is public)
    

Constraints
-
switches will contain between 2 and 16 elements, inclusive.
-
Each element in switches will be between 0 and the number of elements in switches - 1, inclusive.
Examples
0)

    
{1, 0}
Returns: 1
You can switch on the light in the last room, move into the last room and switch off the light in the first room.
1)

    
{0, 1}
Returns: -1
You can't do anything.
2)

    
{1, 2, 0}
Returns: 3
You can switch on the light in the last room, move into the last room, switch on the light in the second room, move into the second room, switch off the light in the first room, move into the last room and switch off the light in the second room.
3)

    
{4, 4, 3, 0, 5, 2}
Returns: 7

4)

    
{7, 11, 1, 12, 6, 3, 0, 2, 6, 0, 0, 5, 9}
Returns: 15

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.