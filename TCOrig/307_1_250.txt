vector <int> process(vector <int> A, int nSwaps) 
{
	int n = A.size();

	for (int i = 0; i < n; i++)
	{
		// move the biggest possible item into a[i]
		int k = 0;
		int p = i, maxp = i;
		while (nSwaps >= p-i && p < n)
		{
			if (A[p] > A[maxp])
			{
				maxp = p;
			}
			p++;
		}
		nSwaps -= maxp-i;
		for (int j = maxp; j > i; j--)
		{
			int t = A[j];
			A[j] = A[j-1];
			A[j-1] = t;
		}
	}	
	return A;	
}


1 2 3 4 5 6 7
2 1 3 4
2 3 1 4

1 3 2 4
3 1 2 4

Problem Statement
    
You are given a vector <int> data. All elements in data are distinct. Only consecutive pairs of elements in data can be swapped. 
You are allowed to perform at most nSwaps swaps. 
Return the lexicographically maximal possible result.
Definition
    
Class:
PartSorting
Method:
process
Parameters:
vector <int>, int
Returns:
vector <int>
Method signature:
vector <int> process(vector <int> data, int nSwaps)
(be sure your method is public)
    

Notes
-
Given two vector <int>s a and b of equal length, a is lexicographically greater than b if an index i (0 <= i < n) exists such that a[0] = b[0], a[1] = b[1], ..., a[i - 1] = b[i - 1] and a[i] > b[i], where n is the size of a.
Constraints
-
data will contain between 1 and 50 elements, inclusive.
-
Each element in data will be between 1 and 1000000, inclusive.
-
All elements in data will be distinct.
-
nSwaps will be between 0 and 1000000, inclusive.
Examples
0)

    
{10, 20, 30, 40, 50, 60, 70}
1
Returns: {20, 10, 30, 40, 50, 60, 70 }
Swap the first two elements.
1)

    
{3, 5, 1, 2, 4}

2
Returns: {5, 3, 2, 1, 4 }
First, swap the third and fourth elements, and then, swap the first and second elements.
2)

    
{19, 20, 17, 18, 15, 16, 13, 14, 11, 12}
5
Returns: {20, 19, 18, 17, 16, 15, 14, 13, 12, 11 }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.