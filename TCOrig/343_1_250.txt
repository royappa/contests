#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define UNDEF (-(1<<30))

using namespace std;

class MoneyGame {
public:

int memo[2][12][12][12][12][12][12];

void initMemo()
{

	for (int a = 0; a < 2; a++)
	for (int b = 0; b < 6; b++)
	for (int c = 0; c < 6; c++)
	for (int d = 0; d < 6; d++)
	for (int e = 0; e < 6; e++)
	for (int f = 0; f < 6; f++)
	for (int g = 0; g < 6; g++)
		memo[a][b][c][d][e][f][g] = UNDEF;
}

vector<int> L, F, values, orig;

int f(int p, int L0, int L1, int L2, int F0, int F1, int F2)
{
	cout << p << " " << L0 << " " << L1 << " " << L2 << " " << F0 << " " << F1 << " " << F2 << " = " << "IN" << endl;
	int& r = memo[p][L0][L1][L2][F0][F1][F2];
	if (r != UNDEF)
	{
		cout << p << " " << L0 << " " << L1 << " " << L2 << " " << F0 << " " << F1 << " " << F2 << " = " << r << endl;
		return r;
	}
		
	// what's in the pot is what they have not played

	int lcoins[3], fcoins[3];
	lcoins[0] = L0; lcoins[1] = L1; lcoins[2] = L2;
	fcoins[0] = F0; fcoins[1] = F1; fcoins[2] = F2;
	
	if (p == 0) // Lenny's turn
	{
		if (L0+L1+L2 == 0)
		{
			r = -(F0*values[0]+F1*values[1]+F2*values[2]);
		}
		else
		{
			r = -100000;
			for (int i = 0; i < 3; i++)
			{
				if (lcoins[i] > 0) // Lenny has a coin of this type
				{
					// put in the pot (or not) and take out whatever he can
					for (int a = 0; a <= ( (i==0)?0:(orig[0]-lcoins[0]-fcoins[0]) ) ; a++)
					for (int b = 0; b <= ( (i==1)?0:(orig[1]-lcoins[1]-fcoins[1]) ) ; b++)
					for (int c = 0; c <= ( (i==2)?0:(orig[2]-lcoins[2]-fcoins[2]) ) ; c++)
					{
						if (a*values[0]+b*values[1]+c*values[2] < values[i])
						{
							r = max(r, f(1, L0+a-(i==0), L1+b-(i==1), L2+c-(i==2), F0, F1, F2));
						}
					}
				}
			}
		}
	}
	else // p = 1, opposite
	{
		if (F0+F1+F2 == 0)
		{
			r = L0*values[0]+L1*values[1]+L2*values[2];
		}
		else
		{
			r = 100000;
			for (int i = 0; i < 3; i++)
			{
				if (fcoins[i] > 0) // Fred has a coin of this type
				{
					// put in the pot and take out whatever he can
					for (int a = 0; a <= ( (i==0)?0:(orig[0]-lcoins[0]-fcoins[0]) ) ; a++)
					for (int b = 0; b <= ( (i==1)?0:(orig[1]-lcoins[1]-fcoins[1]) ) ; b++)
					for (int c = 0; c <= ( (i==2)?0:(orig[2]-lcoins[2]-fcoins[2]) ) ; c++)
					{
						if (a*values[0]+b*values[1]+c*values[2] < values[i])
						{
							r = min(r, f(0, L0, L1, L2, F0+a-(i==0), F1+b-(i==1), F2+c-(i==2)));
						}
					}
				}
			}
		}	
		
	}
	cout << p << " " << L0 << " " << L1 << " " << L2 << " " << F0 << " " << F1 << " " << F2 << " = " << r << "*" << endl;
	return r;
}

int play(vector <int> L_, vector <int> F_, vector <int> values_) 
{
	
	initMemo();

	L = L_;
	F = F_;
	values = values_;
	for (int i = 0; i < 3; i++)
	{
		orig.push_back(L[i]+F[i]);
	}
	return f(0, L[0], L[1], L[2], F[0], F[1], F[2]);
	
}
};


//Powered by [KawigiEdit]
