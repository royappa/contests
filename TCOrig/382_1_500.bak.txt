vector<string> split_nonre(string s, string sep)
{
	char *sC = (char *) malloc(s.size()+1);
	strcpy(sC, s.c_str());
	char *sepC = (char *) sep.c_str();
	char *status = NULL;
	
	char *word;
	vector<string> results;
	while ((word = strtok_r(sC, sepC, &status)) != NULL)
	{
		results.push_back(word);
		sC = NULL;
	}
	return results;
}

vector<int> p;
vector<int> q;
int n, d;
int memo[400][400];

int lcs(int pi, int qi)
{
	int& r = memo[pi][qi];
	if (r != -1)
		return r;
	
	if (pi == n || qi == n)
		return 0;
	
	r = 0;
	if (p[pi] == q[qi] || p[pi]+d != q[qi])
	{
		r = max(lcs(pi+1, qi), lcs(pi, qi+1));
	}
	else if (p[pi]+d == q[qi])
	{
		r = 1+lcs(pi+1, qi+1);
	}
	else
	{
		r = max(lcs(
int color(vector <string> points) 
{
	string s = "";
	for (int i = 0; i < points.size(); i++)
	{
		s += points[i];
	}
	vector<string> w = split_nonre(s, " ");

	p.resize(0);
	for (int i = 0; i < w.size(); i++)
	{
		if (w[i].size() > 0)
		{
			p.push_back(atoi(w[i].c_str()));
		}
	}
	sort(p.begin(), p.end());
	q = p;
	n = p.size();
	int m = 0;
	for (d = 1; d <= 359; d++)
	{
		memset(memo, -1, sizeof(memo));
		m >?= lcs(0, 0);
	}
	return 2*m;	
}

Problem Statement
    
Two sets of points on a circle, A and B, are called similar if it is possible to rotate set B so that it coincides with set A.

You are given several points on a circle. 

You must color some of the points red and some of the points blue. (You can not color a point both red and blue.) 

The set of red points must be similar to the set of blue points.

You will be given the points as a vector <string> points. Concatenate all the elements of points to get a space separated list of points. 

Each point is a single integer representing its polar angle in degrees. 

Return the maximal number of points you can color.

Definition
    
Class:
PointsOnACircle
Method:
color
Parameters:
vector <string>
Returns:
int
Method signature:
int color(vector <string> points)
(be sure your method is public)
    

Notes
-
For a circle centered at O = (0, 0), the polar angle for a point P is the angle between lines OX and OP in the counterclockwise direction, where X is a point on the positive x-axis.
Constraints
-
points will contain between 1 and 50 elements, inclusive.
-
Each element of points will contain between 1 and 50 characters, inclusive.
-
Each element of points will contain only digits ('0'-'9') and spaces.
-
When concatenated, the elements of points will form a single space-separated list of integers without leading or trailing spaces.
-
Each integer in the list will be between 0 and 359, inclusive, with no extra leading zeros.
-
All numbers in the list will be distinct.

Examples
0)

    
{"0 10 15 25 40 50 60"}
Returns: 6
For example, you can color points 0, 15 and 40 red, and points 10, 25 and 50 blue.
1)

    
{"1"}
Returns: 0
When there is only one point, you cannot create two separate sets of colored points.
2)

    
{"0 1 3 7 15 31 63 127"}
Returns: 2

3)

    
{"1","2"," ","3","4"}
Returns: 2

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.