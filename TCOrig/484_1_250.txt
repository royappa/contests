
int theCount(int low, int high) 
{
	int r = 0;
	for (int i = low; i <= high; i++)
	{
		int x = i;
		int num3 = 0;
		bool isRabbit = true;
		while (x > 0)
		{
			int d = x%10;
			if (d > 3)
			{
				isRabbit = false;
				break;
			}
			if (d == 3 && num3 == 1)
			{
				isRabbit = false;
				break;
			}
			num3 = 1;
		}
		if (isRabbit)
			r++;
	}
	return r;	
}

/*
The decimal expansion of a skinny number n may contain only 0's, 1's, 2's and 3's.
There may be at most one 3 and if there is a 3 then there can be no 2's. (Hence of course if there are any 2's then there can be no 3's.)
*/

Problem Statement
    
When cat Taro and rabbit Hanako were practicing hard for SRM 484, they noticed an interesting property of 484. They called it Rabbit Number.  

Let S(n) be the sum of the digits of n. For example, S(484) = 4+8+4 = 16 and S(22) = 2+2 = 4. 

A positive integer x is called a Rabbit Number if S(x*x) = S(x)*S(x). 

For example, 22 is a Rabbit Number because S(484) = S(22)*S(22).  

Return the number of Rabbit Numbers between low and high, inclusive.

Definition
    
Class:
RabbitNumber
Method:
theCount
Parameters:
int, int
Returns:
int
Method signature:
int theCount(int low, int high)
(be sure your method is public)
    

Constraints
-
low will be between 1 and 1,000,000,000, inclusive.
-
high will be between low and 1,000,000,000, inclusive.
Examples
0)

    
22
22
Returns: 1
22 is a Rabbit Number because S(22*22) = S(484) = 16 S(22) * S(22) = 4 * 4 = 16
1)

    
484
484
Returns: 0
484 is not a Rabbit Number because S(484*484) = S(234256) = 22 S(484) * S(484) = 16 * 16 = 256
2)

    
1
58
Returns: 12

3)

    
58
484
Returns: 24

4)

    
1000000000
1000000000
Returns: 1

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.