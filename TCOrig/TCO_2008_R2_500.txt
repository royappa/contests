#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class CreatureTraining {
public:
typedef long long LL;
vector<LL> count, power;
int n;

LL memo[51][101][101];

LL f(int p, int D, int q) // max power of [p,n), given D days left, and that q of creature #p have already been trained
{
//printf("p = %d, D = %d, q = %d\n", p, D, q);	
	if (p == n-1)
	{
//printf("p = %d, D = %d, q = %d, r = %d\n", p, D, q, (count[p]-q)*power[p]);	
		return (count[p]-q)*power[p];
	}
	LL& r = memo[p][D][q];
	if (r != -1LL)
		return r;
	r = (count[p]-q)*power[p]+f(p+1, D, 0);
	if (count[p]-q > 0)
	{
		for (int i = p; i < n; i++)
		{
			if (D >= i-p)
			{
				r >?= power[i]+f(p, D-(i-p), q+1);
			}
		}
	}
//printf("p = %d, D = %d, q = %d, r = %d\n", p, D, q, r);
	return r;
}
		
long long maximumPower(vector <int> count_, vector <int> power_, int D) 
{
	count = vector<LL>(count_.begin(), count_.end());
	power = vector<LL>(power_.begin(), power_.end());
	n = count.size();
	
	memset(memo, -1, sizeof(memo));
	return f(0, D, 0);
	
}
};


//Powered by [KawigiEdit]




//Powered by [KawigiEdit]


Problem Statement
    
You are playing a strategy game and you wish to train the strongest army for the final fight. There are creatures of N levels in the game, numbered from 0 to N-1, inclusive. 

You already have some creatures in your army and D days to train them. 

The number of creatures you have is given in a vector <int> count. It contains N elements and its i-th element is the number of creatures of level i.  

During each day, you can choose one creature and train it. 

Training increases a creature's level by 1, i.e., a creature of level 0 becomes a creature of level 1, a creature of level 1 becomes a creature of level 2, and so on. 

The only exception is creatures of level N-1 - such creatures can't be trained as N-1 is the largest possible level. 

You can train the same creature during more than one day. For example, if you train a creature during 3 days, it will gain 3 levels. You can also skip days and not train any creatures during those days.  

You are given a vector <int> power, where the i-th element of power is the power of one creature of level i. The power of your army is the sum of the powers of all its creatures. Return the maximum possible power your army can have after all D days of training are finished.

Definition
    
Class:
CreatureTraining
Method:
maximumPower
Parameters:
vector <int>, vector <int>, int
Returns:
long long
Method signature:
long long maximumPower(vector <int> count, vector <int> power, int D)
(be sure your method is public)
    

Constraints
-
count will contain between 1 and 50 elements, inclusive.
-
power will contain the same number of elements as count.
-
Each element of count and power will be between 0 and 1,000,000, inclusive.
-
D will be between 1 and 100, inclusive.
Examples
0)

    
{1, 2, 3, 4, 5}
{1, 2, 3, 4, 5}
10
Returns: 65
The initial power of your army is 1*1 + 2*2 + 3*3 + 4*4 + 5*5 = 55. Independent of a creature's level, training increases its power by 1. After 10 days of training the power of your army will be 55 + 10 = 65.
1)

    
{1, 2, 3, 4, 5}
{1, 4, 9, 16, 25}
10
Returns: 309
Now it's better to train higher level creatures, as it'll give your army more additional power. In 10 days you're able to convert 3 creatures with initial level 3 and 4 creatures with initial level 4 into level 5.
2)

    
{1000, 0, 0, 0, 0}
{0, 100, 10, 1000, 0}
8
Returns: 2200
You have 1000 newcomers of level 0. The best solution is to train 2 of them up to level 3, and 2 up to level 1.
3)

    
{1, 2, 3, 4, 5}
{5, 4, 3, 2, 1}
50
Returns: 35
It doesn't make sense to train anybody.
4)

    
{0, 5, 0, 0, 5, 0}
{13, 20, 21, 30, 32, 36}
12
Returns: 318
Train 5 creatures from level 1 to level 3, and 2 creatures from level 4 to level 5.
5)

    
{0, 2, 1, 0, 0, 1, 2}
{25, 292, 328, 391, 618, 771, 952}
11
Returns: 5088
Train everybody except a creature with initial level 2 up to the maximum possible level.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.