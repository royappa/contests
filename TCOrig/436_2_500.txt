#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

// forward for each of the 4 directions
int forw[] = {0,-1,1,0,0,-1,-1,0};

class DoNotTurn {
public:
typedef long long LL;
vector<LL> X,Y;
int N;
int memo[501][501][4];
int wall[501][501];



int f(int x, int y, int dir) // return min # of turns if we are currently at x, y
{
cout << x << " " << y << " " << dir << endl;
	if (x == N-1 && y == N-1)
		return 0;
	int& r = memo[x][y][dir];
	if (r != -1)
		return r;
	r = 1<<30;
	int dx = x+forw[2*dir], dy = y+forw[2*dir+1];
//cout << dx << " " << dy << endl;
	if (dx >= 0 && dx < N && dy >= 0 && dy < N && !wall[dx][dy])
	{
		r <?= f(dx, dy, dir);
	}
	int L = (dir-1);
	if (L < 0) L += 4;
	r <?= f(x, y, L)+1;
	int R = (dir+1);
	if (R > 4) R -= 4;
	r <?= f(x, y, R)+1;
cout << x << " " << y << " " << dir << " " << r << endl;
	return r;

}
// another fine problem by misof, if I had to guess
int minimumTurns(int N_, int X0, int A, int B, int Y0, int C, int D, int P, int M) 
{
	N = N_;
	X.resize(M, 0);
	Y.resize(M, 0);
	X[0] = X0 % P;
	Y[0] = Y0 % P;
	for (int i = 1; i < M; i++)
	{
		X[i] = (X[i-1]*LL(A)+B) % P;
		Y[i] = (Y[i-1]*LL(C)+D) % P;
	}
	memset(wall, 0, sizeof(wall));
	for (int i = 0; i < M; i++)
	{
		LL wx = X[i]%N;
		LL wy = Y[i]%N;
		if (!(wx == N-1 && wy == N-1) && !(wx == 0 && wy == 0))
		{
			wall[wx][wy] = 1;
		}
	}
//for (int i = 0; i < N; i++) {for (int j = 0; j < N; j++) cout << wall[i][j] << " "; cout << endl;}
	
	int r = 1<<30;
	for (int i = 0; i < 4; i++)
	{
		memset(memo, -1, sizeof(memo));
		cout << i << "start " << endl;
		r <?= f(0, 0, i);
	}
	return r == (1<<30) ? -1 : r;
}
};


//Powered by [KawigiEdit]

double test0() {
	int p0 = 2;
	int p1 = 0;
	int p2 = 0;
	int p3 = 1;
	int p4 = 0;
	int p5 = 0;
	int p6 = 1;
	int p7 = 10;
	int p8 = 2;
	DoNotTurn * obj = new DoNotTurn();
	clock_t start = clock();
	int my_answer = obj->minimumTurns(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p9 = 1;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p9 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p9 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}

double test1() {
	int p0 = 3;
	int p1 = 0;
	int p2 = 1;
	int p3 = 1;
	int p4 = 1;
	int p5 = 1;
	int p6 = 0;
	int p7 = 3;
	int p8 = 3;
	DoNotTurn * obj = new DoNotTurn();
	clock_t start = clock();
	int my_answer = obj->minimumTurns(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p9 = -1;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p9 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p9 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}

double test2() {
	int p0 = 3;
	int p1 = 0;
	int p2 = 1;
	int p3 = 1;
	int p4 = 1;
	int p5 = 1;
	int p6 = 1;
	int p7 = 3;
	int p8 = 3;
	DoNotTurn * obj = new DoNotTurn();
	clock_t start = clock();
	int my_answer = obj->minimumTurns(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p9 = 3;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p9 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p9 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}

double test3() {
	int p0 = 10;
	int p1 = 911111;
	int p2 = 845499;
	int p3 = 866249;
	int p4 = 688029;
	int p5 = 742197;
	int p6 = 312197;
	int p7 = 384409;
	int p8 = 40;
	DoNotTurn * obj = new DoNotTurn();
	clock_t start = clock();
	int my_answer = obj->minimumTurns(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p9 = 12;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p9 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p9 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}

double test4() {
	int p0 = 5;
	int p1 = 23;
	int p2 = 2;
	int p3 = 3;
	int p4 = 35;
	int p5 = 5;
	int p6 = 7;
	int p7 = 9;
	int p8 = 3;
	DoNotTurn * obj = new DoNotTurn();
	clock_t start = clock();
	int my_answer = obj->minimumTurns(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p9 = 2;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p9 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p9 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}

double test5() {
	int p0 = 2;
	int p1 = 0;
	int p2 = 0;
	int p3 = 0;
	int p4 = 0;
	int p5 = 0;
	int p6 = 0;
	int p7 = 1;
	int p8 = 0;
	DoNotTurn * obj = new DoNotTurn();
	clock_t start = clock();
	int my_answer = obj->minimumTurns(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t end = clock();
	delete obj;
	cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
	int p9 = 1;
	cout <<"Desired answer: " <<endl;
	cout <<"\t" << p9 <<endl;
	cout <<"Your answer: " <<endl;
	cout <<"\t" << my_answer <<endl;
	if (p9 != my_answer) {
		cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
		return -1;
	}
	else {
		cout <<"Match :-)" <<endl <<endl;
		return (double)(end-start)/CLOCKS_PER_SEC;
	}
}

int main(int argc, char **argv) {
	double time;
	bool errors = false;
	
	if (argc < 2 || atoi(argv[1]) == 0) {
		time = test0();
		if (time < 0.0)
			errors = true;
	}
	
	if (argc < 2 || atoi(argv[1]) == 1) {
		time = test1();
		if (time < 0.0)
			errors = true;
	}
	
	if (argc < 2 || atoi(argv[1]) == 2) {
		time = test2();
		if (time < 0.0)
			errors = true;
	}
	
	if (argc < 2 || atoi(argv[1]) == 3) {
		time = test3();
		if (time < 0.0)
			errors = true;
	}
	
	if (argc < 2 || atoi(argv[1]) == 4) {
		time = test4();
		if (time < 0.0)
			errors = true;
	}
	
	if (argc < 2 || atoi(argv[1]) == 5) {
		time = test5();
		if (time < 0.0)
			errors = true;
	}
	
	if (!errors)
		cout <<"You're a stud (at least on the example cases)!" <<endl;
	else
		cout <<"Some of the test cases had errors." <<endl;
}

