#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class DecorationDay {
public:
#define MOD 10000003

int gcd(int a, int b)
{
	return b == 0 ? a : gcd(b, a % b);
}
int memo[51][100001];
vector<int> v;
int n;

int f(int p, int g) // count of subsets of [p,n) whose gcd would be 1, given that the gcd of other numbers added earlier is g
{
	if (p>=n)
	{
		return g==1;
	}
	int& r = memo[p][g];
	if (r != -1)
		return r;
	
	r = f(p+1, g) + f(p+1, gcd(v[p],g));
	r %= MOD;
	return r;
}

int howMany(vector<int> groups)
{
	v = groups;
	n = v.size();
	memset(memo, -1, sizeof(memo));
	return f(0, 0);
}

/* DP version
int A[51][100001]; // A[p][g] = how many subsets from [0,p] have a gcd of g (different from memoized version)
vector<int> v;
int n;


int howMany(vector <int> groups) 
{
	v = groups;
	n = v.size();
	memset(A, 0, sizeof(A));
	A[0][v[0]] = 1;
	for (int p = 1; p < n; p++)
	{
		A[p][v[p]] = 1;
		for (int i = 1; i <= 100000; i++)
		{
			A[p][i] = (A[p-1][i] + A[p][i]) % MOD;
			A[p][gcd(v[p],i)] = (A[p][gcd(v[p],i)] + A[p-1][i]) % MOD;
		}
	}
	return A[n-1][1];
}
*/
};


//Powered by [KawigiEdit]