typedef pair<int,int> pi;

typedef pair<int, pi> ppi;

int maximalSum(vector <int> n) 
{
	int n = A.size();
	
	vector<ppi> p;
	
	for (int i = 0; i < n; i++)
	{
		for (int j = i+1; j < n; j++)
		{	
			p.push_back(make_pair(A[i]*A[j], make_pair(i, j)));
		}
	}
	
	int sum = 0;
	int i = int(p.size())-1;
	while (i >= 0)
	{
		ppi top = p[i];
		int a = top.first, ai = top.second.first, aj = top.second.second;
		if (a >= A[ai]+A[aj])
		{
			// use this pair
			sum += a;
			for (int j = int(p.size())-1; j >= 0; j--)
			{
				if (p[j].second.first == ai || p[j].second.first == aj || p[j].second.second == ai || p[j].second.second == aj)
				{
					p.erase(p.begin()+j);
				}
			}
		}
		i = int(p.size())-1;
	}
	sum += accumulate(p.begin(), p.end(), 0);
	return sum;
		
}

Problem Statement
    
You are given a list of integers, and you are allowed to group elements into pairs. 

Each element must either belong to a single pair or remain unpaired. 

Sum the products of the pairs with the values of the unpaired elements. 

Your goal is to maximize this sum.

For example, consider the list {0, 1, 2, 4, 3, 5}. 

If you make the pairs (2, 3) and (4, 5), the sum is 0 + 1 + (2 * 3) + (4 * 5) = 27.

You are given a vector <int> data containing the list of integers. Return the maximum possible sum.

Definition
    
Class:
CreatePairs
Method:
maximalSum
Parameters:
vector <int>
Returns:
int
Method signature:
int maximalSum(vector <int> data)
(be sure your method is public)
    

Constraints
-
data will contain between 1 and 50 elements, inclusive.
-
Each element of data will be between -1000 and 1000, inclusive.
Examples
0)

    
{0, 1, 2, 4, 3, 5}
Returns: 27
The example from the problem statement.
1)

    
{-1, 1, 2, 3}
Returns: 6
If we create a pair (2, 3) we get the sum (-1) + 1 + (2 * 3) = 6.
2)

    
{-1}
Returns: -1
No pairs can be created, so the answer is -1.
3)

    
{-1, 0, 1}
Returns: 1
In this case we can create a pair (-1, 0) to make the sum equal to (-1) * 0 + 1 = 1.
4)

    
{1, 1}
Returns: 2

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.