typedef pair<int,int> pi;
typedef vector<pi> vpi;

mysort(vpi &v, int a, int b)
{
	
}

vector <int> sortArray(vector <int> data) 
{
	map<int,int> cnt;
	
	for (int i = 0; i < data.size(); i++)
	{
		cnt[data[i]]++;
	}
	
	vpi v;
	
	for (map<int,int>::iterator it = cnt.begin(); it != cnt.end(); it++)
	{
		v.push_back(make_pair(it->first, it->second)); // howto clone a pair.?
	}
	
	// v is array( [i,count(i)] ) sorted by i
	
	int n = v.size();
	
	int i = 0;
	while (i < n)
	{
		int j = i+1;
		while (j < n && v[j].first == v[j-1].first+1)
			j++;
		mysort(v, i, j-1);
		i = j;
	}
	vector<int> r;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < v[i].second; j++)
		{
			r.push_back(v[i].first);
		}
	}
	return r;	
}

Problem Statement
    
You are given a vector <int> data, and you must order the elements of data such that no two consecutive elements have consecutive values. In other words, result[i] + 1 != result[i + 1] for all i, where 0 <= i < n-1, and n is the number of elements in data. If more than one ordering exists, return the one that comes first lexicographically.
Definition
    
Class:
WeirdSort
Method:
sortArray
Parameters:
vector <int>
Returns:
vector <int>
Method signature:
vector <int> sortArray(vector <int> data)
(be sure your method is public)
    

Constraints
-
data will contain between 1 and 50 elements, inclusive.
-
Each element of data will be between 0 and 1000, inclusive.
Examples
0)

    
{1, 2}
Returns: {2, 1 }
Only one possible ordering exists.
1)

    
{1, 2, 3}
Returns: {1, 3, 2 }
There are only three possible orderings: {1, 3, 2}, {2, 1, 3} and {3, 2, 1}. The first one is lexicographically smallest.
2)

    
{1, 1, 1, 1, 2, 2, 2, 2, 2}
Returns: {2, 2, 2, 2, 2, 1, 1, 1, 1 }
All 2's should be before 1's.
3)

    
{1, 2, 3, 4, 5, 6}
Returns: {1, 3, 2, 4, 6, 5 }

4)

    
{1, 1, 2, 2, 3, 3}
Returns: {1, 1, 3, 3, 2, 2 }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.