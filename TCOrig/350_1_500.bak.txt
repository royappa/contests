// DIGRAPH DAG DIRECTED GRAPH DIRECTED ACYCLIC GRAPH CYCLE CYCLES TEST TESTING DFS
// How to test for cycles in a dag using DFS - CORRECT
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class StarsInGraphs {
public:
#define INF (1<<30)

int sc[60];
int C, n;
vector<string> A;
int visited[60];
int memo[60];

int visitNum;

/*
// Has some extra junk but "v" and "start" are all that's needed. Basically you run multiple dfs's. If you return to the starting point in any of these, then you have a cycle in the DFS. Unlike in an undirected graph where if you return to ANY vertex then there's a cycle, with a dag, it has to be a directed cycle so we have to check that we return "in" to some vertex that we started "out" from. (In a dag you could return "in" to the same vertex twice from different edges but that may not be a cycle).
*/

bool checkCycle(int v, int start, int s)
{
	visited[v] = 1;
	for (int i = 0; i < n; i++)
	{
		if (A[v][i] == '1')
		{
			if (i == start && sc[i] > 0 && sc[i] >= s && sc[i] <= C)
			{
				return true;
			}
			if (!visited[i] && sc[i] > 0 && sc[i] >= s && sc[i] <= C)
			{
				if (checkCycle(i, start, sc[i]))
				{	
					return true;
				}
			}
		}
	}
	return false;
}

int f(int v, int s)
{
	int& r = memo[v];
	if (r != -1)
		return r;
	
	r = 0;
	for (int i = 0; i < n; i++)
	{
		if (A[v][i] == '1' && sc[i] > 0 && sc[i] >= s && sc[i] <= C)
		{
			r = max(r, 1+f(i, sc[i]));
		}
	}
	return r;
}

int starryPaths(vector <string> A_, int C_) 
{
	A = A_;
	C = C_;
	n = A.size();

	
	memset(sc, 0, sizeof(sc));
	
	for (int i = 0; i < n; i++)
	{
		long long outdegree = 0;
		for (int j = 0; j < n; j++)
		{
			outdegree += A[i][j]=='1';
		}
		if (outdegree >= 3)
		{
			sc[i] = (1LL<<outdegree)-(outdegree*(outdegree-1LL)/2LL)-outdegree-1LL;
		}
		//cout << i << " " << sc[i] << endl;
	}

	// METHOD: using dfs
	
	// 1A. Check for cycles using dfs
	for (int i = 0; i < n; i++)
	{
		memset(visited, 0, sizeof(visited));
		// start a separate DFS at each node and check if cycle ends there
		if (sc[i] > 0 && sc[i] <= C)
		{
			if (checkCycle(i, i, sc[i]))
			{
				return -1;
			}
		}
	}
	// 1B. Find longest path using dfs, given that graph is DAG	
		
		
	int best = 0;
	bool found = false;
	for (int i = 0; i < n; i++)
	{
		memset(memo, -1, sizeof(memo));
		if (sc[i] > 0 && sc[i] <= C)
		{
			best = max(best, f(i, sc[i]));
			found = true;
		}
	}
	return !found ? 0 : best+1;		
		
}
};


//Powered by [KawigiEdit]

Problem Statement
    
You are given the adjacency matrix of a directed graph as a vector <string> adjacencyMatrix. The j-th character of the i-th element of adjacencyMatrix will be '1' if there is an edge going from the i-th vertex to the j-th, or '0' otherwise. 

A star in a directed graph is defined as follows: it is comprised of a central vertex and at least three distinct edges emanating from it, which we will call the rays of the star. The number of rays in a star is not bounded; the only restriction is that there must be at least 3 of them. The number of distinct stars for which a vertex V is central will be called the star number of V. For example, if V has 5 edges emanating from it then its star number is 16 = 10 + 5 + 1 since it is central for 10 stars with 3 rays, 5 stars with 4 rays, and 1 star with 5 rays. 


We will call a path in our graph starry if it satisfies two conditions:

Each vertex belonging to the path has a non-zero star number not exceeding C.

Given two subsequent vertices Vi and Vi+1 in the path the star number of Vi+1 is not less than the star number of Vi.

Given the directed graph in the form of its adjacency matrix return the number of vertices in the longest starry path it contains. If there is a starry path of infinite length in the graph return -1. 

If there are no starry paths (all vertices have star numbers either 0 or greater than C) return 0.

Definition
    
Class:
StarsInGraphs
Method:
starryPaths
Parameters:
vector <string>, int
Returns:
int
Method signature:
int starryPaths(vector <string> adjacencyMatrix, int C)
(be sure your method is public)
    

Notes
-
Two stars are considered distinct if either their central vertices are distinct or the sets of rays are distinct.
Constraints
-
adjacencyMatrix will contain between 2 and 50 elements, inclusive.
-
The number of characters in each string of the adjacencyMatrix will be equal to the total number of elements in adjacencyMatrix.
-
Every character of each element of adjacencyMatrix will be either '0' (zero) or '1' (one).
-
The i-th character of the i-th element of adjacencyMatrix will be '0'.
-
C will be between 1 and 109, inclusive.
Examples
0)

    
{"01110",
 "10111",
 "00000",
 "00000",
 "00000"}
1000
Returns: 2
The starry path 0 -> 1 is the longest one. Vertex 0 has star number 1, vertex 1 has star number 5, and all other vertices have star numbers 0.
1)

    
{"01011",
 "00111",
 "10011",
 "00000",
 "00000"}
1
Returns: -1
Vertices 0, 1, and 2 have star numbers 1 and form a cycle, thus we have an infinite starry path.
2)

    
{"0111",
 "0000",
 "0000",
 "0000"}
1
Returns: 1
This time the longest starry path consists of a single vertex.
3)

    
{"01111",
 "00000",
 "00000",
 "00000",
 "00000"}
4
Returns: 0
Vertex 0 has star number 5 and the rest of the vertices have a zero star number, and thus none of them can appear in a starry path.
4)

    
{"010001100",
 "001001100",
 "000101110",
 "000010111",
 "000001111",
 "010000000",
 "000110000",
 "000100001",
 "100001000"}
10
Returns: 5

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.