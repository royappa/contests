// WORKING Dijkstra with STL priority queue. NOTE: check if regular BFS works (all distances equal), before using Dijkstra

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>

using namespace std;

class TurningMaze {
public:
vector<string> A;
int W, H;

#define setbit(x,b) (x) |= (1<<(b))
#define flipbit(x,b) (x) ^= (1<<(b))
typedef pair<int,int> pii;
#define lowmask ((1<<14)-1)

#define row(v) (((v) & (7<<14))>>14)
#define col(v) (((v) & (7<<17))>>17)

char get(int state, int r, int c)
{	
	char ch = A[r][c];
	if (ch == 'A' || ch == 'B')
		return ch;
	int flip1 = (state & (1<<r)) != 0;
	int flip2 = (state & ((1<<c)<<7)) != 0;
	int flips = (flip1 + flip2)%2;
	
	if (flips == 0)
		return ch;
	
	return ch == 'C' ? 'D' : 'C';
}	
	
// N,S,W,E
// C = NS, D = WE
bool valid(int v, int r, int c, int dr, int dc, int dir)
{
	char ch = get(v, r, c);
	char ch2 = get(v, dr, dc);
	if (ch == 'A' && (dir == 0 || dir == 1)) return ch2 == 'A' || ch2 == 'C';
	if (ch == 'A' && (dir == 2 || dir == 3)) return ch2 == 'A' || ch2 == 'D';
	if (ch == 'B') return false;
	if (ch == 'C' && (dir == 0 || dir == 1)) return ch2 == 'A' || ch2 == 'C';
	if (ch == 'D' && (dir == 2 || dir == 3)) return ch2 == 'A' || ch2 == 'D';
	return false;
}	

int flip(int v, int r, int c)
{
	int mask = (1<<r)|((1<<c)<<7);
	return v ^ mask;
}

int step(int v, int r, int c)
{
	v = (v & lowmask)|(r<<14)|(c<<17);	
	return v;

}

int minTime(vector <string> maze) 
{	
	A = maze;
	H = A.size();
	W = A[0].size();
	
	vector<int> dist(100+(1<<23), 1<<30);  // 1<<30 = INFINITY
	int state = 0;
	dist[state] = 0;  // start state
	
	priority_queue<pii> pq;
	pq.push(make_pair(-0, state));

	int dir[] = {-1,0, 1,0, 0,-1, 0,1}; // N, S, W, E
	
	while (pq.size() > 0)
	{
		pii closest = pq.top(); pq.pop();
		int d = -closest.first, v = closest.second; // STL pq is max-heap by default, too lazy to change.
		if (d > dist[v]) // this is to handle stupid STL pq, which does not have an update. So we may have outdated vertices in PQ, must ignore.
			continue;
				
		// first try all moves based on current room status
		
		int r = row(v);
		int c = col(v);
		
		for (int p = 0; p < 4; p++) // iterate through all neighbors
		{
			int dr = r+dir[2*p], dc = c+dir[2*p+1];
			if (dr < 0 || dr >= H || dc < 0 || dc >= W)
				continue;
			
			if (!valid(v, r, c, dr, dc, p))
				continue;
			
			int state1 = step(v, dr, dc);
			if (d+1 < dist[state1])
			{
				dist[state1] = d+1;
				pq.push(make_pair(-dist[state1], state1));
			}
		}
		
		v = flip(v, r, c);
		
		// then try all moves based on room status if we flip
		for (int p = 0; p < 4; p++)
		{
			int dr = r+dir[2*p], dc = c+dir[2*p+1];
			if (dr < 0 || dr >= H || dc < 0 || dc >= W)
				continue;
				
			if (!valid(v, r, c, dr, dc, p))
				continue;
			
			int state1 = step(v, dr, dc);

			if (d+2 < dist[state1])
			{
				dist[state1] = d+2;
				pq.push(make_pair(-dist[state1], state1));
			}
		}
		
	}
	int m = 1<<30;
	for (int i = 0; i < dist.size(); i++)
	{
		int r = row(i), c = col(i);
		if (r == H-1 && c == W-1)
			m <?= dist[i];
	}
	return m == 1<<30 ? -1 : m;
}
};


//Powered by [KawigiEdit]

//Powered by [KawigiEdit]

Problem Statement
    
Once again, you are stuck in a rectangular maze, represented by a vector <string> maze. Each character in each element of maze represents one room. Each room, naturally, has four sides, and each side may or may not have a door. The character representing the room will denote the set of doors present in that room. There will be four types of rooms: 'A' denotes a room with all four doors present, 'B' denotes a room with no doors, 'C' denotes a room with only north and south doors, and 'D' denotes a room with only east and west doors. The directions are chosen so that each element of maze represents a row of rooms from west to east, and those rows are ordered from north to south in maze.
You can move around the maze by walking from one room to one of the four adjacent rooms. However, you can do that only if both the room you are in and the room you are going into have the corresponding doors. For example, you can only move to the north if your room has a north door and the room to the north has a south door. The maze is surrounded by a solid wall, so you can never walk out of it, even if there's a door in a border room leading out. Every movement from one room to another takes 1 second.
The rooms having not enough doors may seriously constrain your movement in the maze. Luckily, you've been given a remote control that can change the maze. The remote control has only one button, and pressing this button makes all the rooms in the same row as your room and all the rooms in the same column as your room rotate 90 degress clockwise. Your room itself rotates twice; notice that a double rotation has the same effect as the room not being rotated at all. When a room rotates 90 degrees clockwise, its north door (or absence of such) becomes its east door (or absence of such), east becomes south, south becomes west and west becomes north. Operating the remote control also takes 1 second.
Return the least number of seconds required to get from the room at the northwest corner of the maze to the room at the southeast corner. If there's no way to achieve that, return -1.
Definition
    
Class:
TurningMaze
Method:
minTime
Parameters:
vector <string>
Returns:
int
Method signature:
int minTime(vector <string> maze)
(be sure your method is public)
    

Constraints
-
maze will contain between 2 and 7 elements, inclusive.
-
Each element of maze will contain between 2 and 7 characters, inclusive.
-
All elements of maze will contain the same number of characters.
-
Each character in each element of maze will be one of 'A', 'B', 'C', 'D'.
Examples
0)

    
{"AA", "AA"}
Returns: 2
We can walk anywhere we like.
1)

    
{"AAA", "BBA", "AAA", "ABB", "AAA"}
Returns: 10
Zig-zag.
2)

    
{"AAACAAA", "BBBBBBA"}
Returns: 8
Remote control comes into play.
3)

    
{"ACDCDCA", "BBBBBBA"}
Returns: 12
You can apply the remote control multiple times.
4)

    
{"CA", "BA"}
Returns: -1
The remote control won't help if you're stuck in the initial cell.
5)

    
{"CAA", "DAA", "ACA"}
Returns: 6

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.