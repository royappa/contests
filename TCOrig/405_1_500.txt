#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class FoldThePaper {
public:
vector<string> split_nonre(string s, string sep)
{
	char *sC = (char *) malloc(s.size()+1);
	strcpy(sC, s.c_str());
	char *sepC = (char *) sep.c_str();
	char *status = NULL;
	
	char *word;
	vector<string> results;
	while ((word = strtok_r(sC, sepC, &status)) != NULL)
	{
		results.push_back(word);
		sC = NULL;
	}
	return results;
}

int getValue(vector <string> paper) 
{
	int rows = paper.size();
	int A[12][12];
	memset(A, 0, sizeof(A));
	int cols = 0;
	for (int i = 0; i < rows; i++)
	{
		vector<string> w = split_nonre(paper[i], " ");
		cols = w.size();
		for (int j = 0; j < cols; j++)
		{
			A[i][j] = atoi(w[j].c_str());
		}
	}
	
	int B[12][12], C[12][12];
	int rfolds = rows-1, cfolds = cols-1;
	int m = -(1<<25);
	for (int rm = 0; rm < (1<<rfolds); rm++)
	{
		// fold A into B according to rm
		memcpy(B, A, sizeof(B));
		int start = 0;
		for (int i = 0; i < rfolds; i++)
		{
			if ((rm & (1<<i)) == 0) continue;
			// fold between rows i & i+1
			int p = 0;
			for (int k = i; k >= start; k--, p++)
			{
				for (int j = 0; j < cols; j++)
				{
					B[i+1+p][j] += A[k][j];
				}
			}
			start = i+1;
		}		
		memcpy(C, B, sizeof(B));
		// B[start..rows-1] contains folded
		for (int cm = 0; cm < (1<<cfolds); cm++)
		{
			//fold B into C according to cm & calculate largest
			memcpy(B, C, sizeof(B));
			int cstart = 0;
			for (int j = 0; j < cfolds; j++)
			{
				if ((cm & (1<<j)) == 0) continue;
				int p = 0;
				for (int k = j; k >= cstart; k--, p++)
				{
					for (int i = start; i < rows; i++)
					{
						B[i][j+1+p] += C[i][k];
					}
				}
				cstart = j+1;
			}
			for (int i = start; i < rows; i++)
			{
				for (int j = cstart; j < cols; j++)
				{
					m >?= B[i][j];
				}
			}
		}
	}
	return m;			
}
};


//Powered by [KawigiEdit]