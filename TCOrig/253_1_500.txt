#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
#define BILLION 1000000000
typedef long long LL;

class AlphabetCount {
public:

LL A[51][51][27][27]; // A[r][c][let][len] = number of distinct paths starting at r,c, starting with letter let, of length len
// A[r][c][let][len] = sum(A[nr][nc][let+1][len-1], for every neighbor nr,nc)

int count(vector <string> grid, int length) 
{
	int height, width;
	height = grid.size();
	width = grid[0].size();
	
	memset(A, 0, sizeof(A));
	for (int r = 0; r < height; r++)
	{
		for (int c = 0; c < width; c++)
		{
			A[r][c][grid[r][c]-'A'][1] = 1;
		}
	}
	for (int len = 2; len <= length; len++)
	{
		for (int r = 0; r < height; r++)
		{
			for (int c = 0; c < width; c++)
			{
				int let = grid[r][c]-'A';
				LL num = 0;
				for (int dr = -1; dr <= 1; dr++)
				{
					for (int dc = -1; dc <= 1; dc++)
					{
						if (dr == 0 && dc == 0)
							continue;
						if (r+dr < 0 || r+dr >= height || c+dc < 0 || c+dc >= width)
							continue;
						int nr = r+dr, nc = c+dc;
						num += A[nr][nc][let+1][len-1];
					}
				}
				if (num > BILLION)
					num = BILLION;
				A[r][c][let][len] = num;
			}
		}
	}			
				
	LL n = 0;
	for (int r = 0; r < height; r++)
	{
		for (int c = 0; c < width; c++)
		{
			n += A[r][c][0][length];
			if (n > BILLION)
				return BILLION;
		}
	}
	return int(n);
}
};


Problem Statement
    
You will be given a 2-dimensional grid of letters and a length. Write a method to count the total number of distinct paths of consecutive letters of the given length, starting at 'A'. Paths can step from one square in the grid to any adjacent square (horizontally, vertically, or diagonally).
For example, in the following grid, there are 7 paths of consecutive letters from 'A' to 'C':
    { "ABC",
      "CBZ",
      "CZC",
      "BZZ",
      "ZAA" }

    A B C    A . C    A B .    A . .    A . .    A . .    . . .
    . . .    . B .    C . .    C B .    . B .    . B .    . . .
    . . .    . . .    . . .    . . .    C . .    . . C    C . .
    . . .    . . .    . . .    . . .    . . .    . . .    B . .
    . . .    . . .    . . .    . . .    . . .    . . .    . A .
    (spaces are for clarity only)
so, for this grid and a length of 3, your method should return 7.
If there are more than 1,000,000,000 paths, your method should return 1,000,000,000.
Definition
    
Class:
AlphabetCount
Method:
count
Parameters:
vector <string>, int
Returns:
int
Method signature:
int count(vector <string> grid, int length)
(be sure your method is public)
    

Constraints
-
grid will contain between 1 and 50 elements, inclusive.
-
Each element of grid will be between 1 and 50 characters long, inclusive.
-
Each element of grid will have the same length.
-
grid will contain only uppercase letters ('A'-'Z').
-
length will be between 1 and 26, inclusive.
Examples
0)

    
{ "ABC",
  "CBZ",
  "CZC",
  "BZZ",
  "ZAA" }
3
Returns: 7
This is the example from the problem statement.
1)

    
{ "AAAA",
  "AAAA",
  "AAAA" }
1
Returns: 12

2)

    
{ "ABAB",
  "BABA",
  "ABAB",
  "BABA" }
2
Returns: 24

3)

    
{ "HIJKLMNOPQZZZONMLKHIDZYQR",
  "GYXWVUTSRASTZZPSTUJGECPXS",
  "FZABCDEFARQPUQRAAAVWFBOWT",
  "EONMJIHGAJMNOVAAAAAYXANUV",
  "DCBLKDEFIEKLEDWAAAZFGHMLK",
  "UVAZYBCGHFDFCAYXNPQZEDIJA",
  "TSWXAKLZGCZBGZIJOMZRUTCBZ",
  "RQPONMJIHBAZZHZZKLZZSVWXY" }
26
Returns: 7

4)

    
{ "CZC",
  "ZBZ",
  "AZA" }
3
Returns: 4

5)

    
{ "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
26
Returns: 1000000000

6)

    
{ "BDBCBACABDDCCADCBDDCBDDDBCCCCABACADDDCCCBADDDBADCA",
  "DCBBBACBDBACCADABCCAABACDBADBCBBABACBCADADCBDABBBD" }
4
Returns: 20

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.