#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define MINSTR "{"

using namespace std;

class UnrepeatableWords {
public:
int L;
int k;
int n;

map<string,string> memo;

bool allowed(string s)
{
	int n = s.size();

	for (int p = 0; p < n; p++)
	{
		for (int i = 1; p+k*i <= n; i++) // substrings of length i starting at p, repeated k times
		{
			bool all = true;
			for (int j = 0; j < k; j++)
			{
				if (s.substr(p, i) != s.substr(p+j*i, i))
				{
					all = false;
					break;
				}
			}
			if (all)
			{
				return false; // has a k-substring - not allowed
			}
		}
	}
	return true; // no k-substrings
}

string trim(int left, string s)
{
	int p = n-left;
	// trim s to where it ends with at most k-2 repeated substrings	

}

string f(int m, string prefix) // return least string S of length m, such that prefix+S has less than k consecutive substrings
{
	char buf[100];
	sprintf(buf, "%d:%s", m, prefix.c_str());
	string key = buf;
	if (memo.count(key) > 0)
	{
		return memo[key];
	}
	
	if (m == 0)
	{
		return prefix;
	}
	string best = MINSTR;
	
	for (char let = 'A'; let < 'A'+L; let++)
	{
		string t = prefix+let;
		if (allowed(t))
		{
			string s = f(m-1, trim(m-1, t));
			best = min(best, s);
		}
	}
	memo[key] = best;
	return best;
}

string getWord(int k_, int n_, int allowed) 
{
	L = allowed;
	k = k_;
	n = n_;
	
	string s = f(n, "");

	if (s == MINSTR)
		return "";
	return s;
}
};


//Powered by [KawigiEdit]

Problem Statement
    
For a given integer k, we call a string S k-unrepeatable if there is no substring that appears k consecutive times in S.

For example, the string CCABAABAABAC is 4-unrepeatable. But it's not 3-unrepeatable, because the string ABA appears in it 3 times in a row. CCABAABACABA and ABABAABA are examples of 3-unrepeatable strings.

You are given three integers, k, n and allowed. Return the lexicographically smallest k-unrepeatable word of length n that uses only the first allowed uppercase characters of the English alphabet. If no such word exists, return the empty string.
Definition
    
Class:
UnrepeatableWords
Method:
getWord
Parameters:
int, int, int
Returns:
string
Method signature:
string getWord(int k, int n, int allowed)
(be sure your method is public)
    

Constraints
-
k will be between 2 and 10, inclusive.
-
n will be between 1 and 50, inclusive.
-
allowed will be between 1 and 26, inclusive.
Examples
0)

    
3
5
2
Returns: "AABAA"
All lexicographically smaller strings of length 5 contain three consecutive occurrences of the letter A, so they aren't 3-unrepeatable.
1)

    
3
5
1
Returns: ""
The only possible string is AAAAA, which is not 3-unrepeatable.
2)

    
3
10
2
Returns: "AABAABABAA"

3)

    
3
50
2
Returns: "AABAABABAABAABBAABAABABAABAABBAABAABABAABABBAABAAB"

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.