int n;
vector<int> v;

int f(int k, int A, int p)  // maximum possible weight of a wrestler from k..n-1, whose average is A, with exactly p wrestlers participating
{
	if (p == 1) // only one wrestler participating
	{
		for (int i = k; i < n; i++)
		{
			if (v[i] == A)
			{
				return A;
			}
		}
		return -2;
	}

	int& r = memo[k][A][p];
	if (r != -1)
		return r;
	
	r = -2;

	if (A*p-v[k] > 0) // this wrestler could be a participant
	{
		r >?= f(k+1, (A*p-v[k])/(p-1), p-1);
	}
	r >?= f(k+1, A, p); // this wrestler is not
	return r;
}

int maxWeight(vector <int> weight, int A) 
{
	v = weight;
	n = v.size();
	
	int m = -2;
	memset(memo, -1, sizeof(memo));
	for (int i = 1; i <= n; i++)
	{
		m >?= f(0, A, i); // i wrestlers participating
	}
	return m == -2 ? -1 : m;
}
Problem Statement
    
There are several sumo wrestlers registered for the current season. 

You are given a vector <int> weight, where the i-th element is the weight of the i-th wrestler. 

One or more of these wrestlers are registered in this week's tournament. 

You are given an int averageWeight, which is the exact average weight of the wrestlers registered in the tournament. 

Return the maximal possible weight of a wrestler who might be in this tournament, or -1 if the average is not possible with the given input.

Definition
    
Class:
SumoTournament
Method:
maxWeight
Parameters:
vector <int>, int
Returns:
int
Method signature:
int maxWeight(vector <int> weight, int averageWeight)
(be sure your method is public)
    

Constraints
-
averageWeight will be between 1 and 200, inclusive.
-
weight will contain between 1 and 50 elements, inclusive.
-
Each element of weight will be between 1 and 200, inclusive.
Examples
0)

    
{80,90,100}
90
Returns: 100
There are three possible tournaments with an average weight of 90: {80,90,100}, {80,100}, {90}. Thus, it is possible that the wrestler with weight 100 is in the tournament.
1)

    
{81,90,150}
90
Returns: 90

2)

    
{10,20}
15
Returns: 20

3)

    
{40,30,20,10}
27
Returns: -1
There is no way to achieve an average weight of 27.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.