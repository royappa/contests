int visited[21][21][21][21][2];
int dir[] = {-1,0,1,0,0,-1,0,1};
int n;
// Acknowledgement: idea taken from 2004 TopCoder Collegiate Challenge Online Round 2 Editorial
int mm(int p, int rw, int cw, int rb, int cb, int moves)
{
	visited[p][rw][cw][rb][cb] = 1;
	if (rw == rb && cw == cb)
	{
		// 1-p won
		if (1-p == 0) 
		{
			return moves;
		}
		else
		{
			return -moves;
		}
	}
	int best = 0;
	if (p == 0)
	{
		best = -INF;
	}
	else
	{
		best = INF;
	}
	if (p == 0) // move 1 cell
	{
		for (int d = 0; d < 4; d++)
		{
			int dr = dir[2*d]+rw, dc = dir[2*d+1]+cw;
			if (dr < 0 || dr >= n || dc < 0 || dc >= n) continue;
			if (visited[1-p][dr][dc][rb][cb]) continue;
			best >?= mm(1-p, dr, dc, rb, cb, moves+1);
		}
	}
	else
	{
		for (int d = 0; d < 4; d++)
		{
			for (int len = 1; len <= 2; len++)
			{
				int dr = dir[2*d]+len*rb, dc = dir[2*d+1]+len*cb;
				if (dr < 0 || dr >= n || dc < 0 || dc >= n) continue;
				if (visited[1-p][rw][cw][dr][dc]) continue;
				best <?= mm(1-p, rw, cw, dr, dc, moves+1);
			}
		}
	}
	return best;
}
			
    
string winner(int n_, int rowWhite, int colWhite, int rowBlack, int colBlack) 
{
	memset(visited, 0, sizeof(visited));
	n = n_;
	int val = f(0, rowWhite, colWhite, rowBlack, colBlack, 0);
	char buf[100];
	if (val > 0)
	{
		sprintf(buf, "WHITE %d", val);
	}
	else
	{
		sprintf(buf, "BLACK %d", -val);
	}
	return string(buf);	
}

Problem Statement
    
Two players play a simple game on a n x n board. The first player has a single white checker which is initially located at (rowWhite, colWhite). 

The second player has a single black checker which is initially located at (rowBlack, colBlack). 

All coordinates are 1-based. 

The two players alternate turns, and the first player moves first.

When it is the first player's turn, he chooses one of four directions (up, down, left or right) and moves his checker one cell in the chosen direction. 

When it is the second player's turn, he also chooses one of those four directions and moves his checker one or two cells in the chosen direction. A player wins the game when his move puts his checker in the cell occupied by his opponent's checker.

Both players use an optimal game strategy. 

If the player can win, he will follow the strategy that minimizes the number of moves in the game. If the player cannot win, he will follow the strategy that maximizes the number of moves in the game.

If the first player will win, return "WHITE x", and if the second player will win, return "BLACK x", where x is the number of moves in the game (all quotes for clarity).

Definition
    
Class:
TheEasyChase
Method:
winner
Parameters:
int, int, int, int, int
Returns:
string
Method signature:
string winner(int n, int rowWhite, int colWhite, int rowBlack, int colBlack)
(be sure your method is public)
    

Constraints
-
n will be between 2 and 20, inclusive.
-
rowWhite will be between 1 and n, inclusive.
-
colWhite will be between 1 and n, inclusive.
-
rowBlack will be between 1 and n, inclusive.
-
colBlack will be between 1 and n, inclusive.
-
(rowWhite, colWhite) and (rowBlack, colBlack) will represent different cells.
Examples
0)

    
2
1
1
2
2
Returns: "BLACK 2"
There are two possible moves for the first player. But he will lose the game anyway.
1)

    
2
2
2
1
2
Returns: "WHITE 1"
Just one move in this game.
2)

    
3
1
1
3
3
Returns: "BLACK 6"

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.