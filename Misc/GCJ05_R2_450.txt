#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long LL;

class HashQuality {
public:

LL collisionCount(int bits, vector <int> mults, vector <int> adds, int size)
{
	LL counts[51][2][size]; // counts[len,b,key] = number of sequences of length Len, ending in bit b, which hash to this key.
	
	memset(counts, 0LL, sizeof(counts));
	
	counts[1][0][adds[0] % size]++;
	counts[1][1][adds[1] % size]++;
	
	// calculate
	for (int len = 2; len <= bits; len++)
	{
		for (int p = 0; p <= 1; p++)
		{
			for (int lastkey = 0; lastkey < size; lastkey++)
			{
				if (counts[len-1][p][lastkey] > 0LL)
				{
					for (int c = 0; c <= 1; c++)
					{
						int v = p*2+c;
						int key = (lastkey*mults[v]+adds[v]) % size;
						counts[len][c][key] += counts[len-1][p][lastkey];
					}
				}
			}
		}
	}
	//for (int len = 1; len <= bits; len++)
	//	for (int k = 0; k < size; k++)
			//cout << len << " " << k << " " <<  counts[len][0][k] << " " << counts[len][1][k] << endl;
			
	LL best = 0LL;
	for (int k = 0; k < size; k++)
	{
		LL sum = 0;
		for (int len = 1; len <= bits; len++)
		{
			sum += counts[len][0][k] + counts[len][1][k];
		}
		best = max(sum, best);
	}
	return best;
}

};

Problem Statement
    
Consider the following hash algorithm for sequences of bits (indexes are 0-based):
   function hash(bits)
      set key = 0
      prepend '0' to bits
      for( i = 1 to lengthof(bits)-1 )
         if(bits[i-1]=='0' and bits[i] == '0') key = (key * mults[0] + adds[0]) % size
         if(bits[i-1]=='0' and bits[i] == '1') key = (key * mults[1] + adds[1]) % size
         if(bits[i-1]=='1' and bits[i] == '0') key = (key * mults[2] + adds[2]) % size
         if(bits[i-1]=='1' and bits[i] == '1') key = (key * mults[3] + adds[3]) % size
      end
      return key
   end
	
The algorithm first prepends the bit '0' to the input sequence, and then iterates over all the bits, starting with the second bit (the first one in the input sequence). key is adjusted according to the problem inputs mults, adds, and size. Your task is to evaluate the quality of this hash function. Considering all possible sequences with between 1 and bits bits, inclusive, find a key that has the most collisions. That is, find a key that is generated most often by the sequences of bits. Your method should return the number of sequences of bits that generate this key.
Definition
    
Class:
HashQuality
Method:
collisionCount
Parameters:
int, vector <int>, vector <int>, int
Returns:
long long
Method signature:
long long collisionCount(int bits, vector <int> mults, vector <int> adds, int size)
(be sure your method is public)
    

Constraints
-
mults and adds will each have exactly 4 elements between 0 and 1000, inclusive.
-
size will be between 1 and 10,000, inclusive.
-
bits will be between 1 and 50, inclusive.
Examples
0)

    
1
{1,2,3,4}
{1,2,3,4}
10
Returns: 1
There are two possible sequences: "0" and "1". For the sequence "0", we prepend '0' to get "00". There is only one iteration through the loop, and it changes key from 0 to 1. For the sequence "1", we prepend to get "01". The iteration through the loop changes key from 0 to 2.
1)

    
3
{1,2,3,4}
{1,2,3,4}
10
Returns: 4
The 14 possible sequences hash as follows:
bits | key
-----+-----
   0 | 1
   1 | 2
  00 | 2
  01 | 4
  10 | 9
  11 | 2
 000 | 3
 001 | 6
 010 | 5
 011 | 0
 100 | 0
 101 | 0
 110 | 9
 111 | 2
4 of the sequences generate the key 2, so the return is 4.
2)

    
5
{11,2,13,47}
{13,23,31,43}
20
Returns: 8

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.lem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.