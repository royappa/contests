	public double avgLength(String[] lines)
	{
		String all = "";
		int n = lines.length;
		
		int count = 0, len = 0;
		for (int i = 0; i < n; i++)
		{
			String[] w = all.split("[^A-Za-z\\-]+");
			int numWords = w.length;
			for (int j = 0; j < numWords; j++)
			{
				if (w[j].matches("[A-Za-z\\-]+"))
				{
					String[] sw = w[i].split("\\-");
					for (int k = 0; k < sw.length; k++)
					{
						if (sw[i].length() > 0)
						{
							count++;
							len += sw[i].length();
						}
					}
				}
				else if (j == numWords-1 && w[j].matches(".*\\-$"))
				{
					if (i <= n-2) 
					{
						lines[i+1] = w[i] + lines[i+1];
					}
					else
					{
						String[] sw = w[i].split("\\-");
						for (int k = 0; k < sw.length; k++)
						{
							if (sw[i].length() > 0)
							{
								count++;
								len += sw[i].length();
							}
						}
					}
				}
			}
		}
		System.out.println(len+" "+count);
		return (double) len / (double) count;
	}
	
Problem Statement
    
We want to be able to judge whether text is suitable for a particular age group. We will base our judgment on the average length of a word in the text, so we need to define what a "word" is.

We define a "word" to be a maximal sequence of letters ('A'-'Z' and/or 'a-z') within a single line. (Maximal means that if 2 letters are adjacent within a line, they are in the same word.) 

But if a line ends with a sequence of one or more letters immediately followed by a hyphen ('-') and the next line starts with a sequence of one or more letters, all these letters are considered to be in the same word. It is even possible that a hyphenated word could extend across several lines (see Example 2).
Create a class Hyphenated that contains a method avgLength that is given a String[] lines containing the lines of text and that returns the average length of the words within the text.
Definition
    
Class:
Hyphenated
Method:
avgLength
Parameters:
String[]
Returns:
double
Method signature:
double avgLength(String[] lines)
(be sure your method is public)
    

Notes
-
A return value with either an absolute or relative error of less than 1.0E-9 is considered correct.
Constraints
-
lines will contain between 1 and 50 elements inclusive.
-
Each element of lines will contain between 1 and 50 characters inclusive.
-
Each character in each element of lines will be a letter ('A-'Z' or 'a'-'z') or will be one of these: ' ', '-', '.'
-
At least one element of lines will contain a letter.
Examples
0)

    
{"  now is the ex-", "ample.  "} 
Returns: 3.75
There are 4 words: now, is, the, example
1)

    
{"  now is the ex-", " ample.  "}
Returns: 3.0
There are 5 words: now, is, the, ex, ample Note that the leading blank prevents the joining of ex and ample. Also note that words only consist of letters, so the hyphen is never a part of a word.
2)

    
{"inter-","national-","ization.."}
Returns: 20.0
There is only one word.
3)

    
{"All the time I have well-defined  "," trouble."}
Returns: 4.125
Note that well-defined consists of 2 separate words.
4)

    
{"hello-","-","-","-","great"}
Returns: 5.0

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.