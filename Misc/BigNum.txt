
import java.util.*;
public class LongNumber
{
	public int findDigit(int k)
	{
		int top = 1;
		int bot = 1;
		String tops = Integer.toString(top);
		String bots = Integer.toString(bot*bot);
		int topslen = tops.length();
		int botslen = bots.length();
		int topscur = 0;
		int botscur = 0;
		int ti, bi, si;
		for (int i = 1; i <= k; i++)
		{
			if (topscur == topslen)
			{
				top++;
				tops = Integer.toString(top);
				topslen = tops.length();
				topscur = 0;
			}
			ti = tops.charAt(topscur++) - '0'; // ith digit of top
			if (botscur == botslen)
			{
				bot++;
				bots = Integer.toString(bot*bot);
				botslen = bots.length();
				botscur = 0;
			}
			bi = bots.charAt(botscur++) - '0'; // ith digit of bot
			si = (ti + bi) % 10; 	
		}
		int c = 0; // c = carry from rest of sum
		return (si+c) % 10;
	}
}

Problem Statement
    
We generate two infinitely long numbers. The first number is generated by writing down all positive consecutive integers, while the second is generated by writing down all of their squares. We then find the sum of these two numbers. Here are the first 33 digits of the calculation:
  123456789101112131415161718192021...
+ 149162536496481100121144169196225...
= 272619325597593231536305887388246...
The first digit of the result is 2, the second digit is 7, the third is 2 and so on.
Given an int k, return the digit at position k of the resulting number, where the first digit is at position 1.
Definition
    
Class:
LongNumber
Method:
findDigit
Parameters:
int
Returns:
int
Method signature:
int findDigit(int k)
(be sure your method is public)
    

Constraints
-
k will be between 1 and 2147483647 inclusive.
Examples
0)

    
1
Returns: 2

1)

    
5
Returns: 1

2)

    
78
Returns: 5

3)

    
1000000
Returns: 6

4)

    
1780243932
Returns: 1

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.