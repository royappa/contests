
	public int correctVolume(String[] queries, int nb, int ithBox)
	{
		int nq = queries.length;
		ArrayList q = new ArrayList();
		
		for (int i = 0; i < nq; i++)
		{
			String[] w = q.split(",");
			int[] x = { Integer.parseInt(q[0]), Integer.parseInt(q[1]), Integer.parseInt(q[2]) };
			q.add(x);
		}
			
		while (true)
		{
			int minvol = 1000;
			for (int i = 0; i < q.size(); i++){
			{
				int[] x = (int[]) q.get(i);
				if (x[2] < minvol)
				{
					minvol = x[2];
				}				
			}
			int[] counts = new int[nb+1];
			Arrays.fill(counts, 0);
			int[] delpos = new int[nq];
			Arrays.fill(delpos, 0);
			int ndel = 0;
			for (int i = 0; i < q.size(); i++)
			{
				int[] x = (int[]) q.get(i);
				if (x[2] == minvol)
				{
					counts[x[0]]++;
					counts[x[1]]++;
					delpos[ndel++] = i;
				}
			}
			int m = 1;
			for (int i = 1; i <= nb; i++)
			{
				if (counts[i] > counts[m])
				{
					m = i;
				}
			}
			if (m == ithBox)
			{
				return minvol;
			}
			for (int i = 0; i < ndel; i++)
			{
				q.remove(delpos[i]);
			}
			
		}
		return 0;
	}
	
Problem Statement
    
You are given a certain number of boxes (numberOfBoxes) of different volumes. The boxes are numbered 1 to numberOfBoxes. After this, I then make comparisions between every pair of boxes and, for each pair, tell you the volume of the smaller box. Given this data, you have to tell me the size of the box numbered ithBox. (The box numbered ithBox will not be one of the two largest boxes.)  You are given a String[], queries, each element of which describes a single comparision and is of the form "box1,box2,volume" (quotes for clarity) where box1 and box2 are the numbers of the two boxes being compared and volume is the volume of the smaller box. For instance, if I compare the boxes numbered 5 and 6, which have volumes 10 and 99, respectively, the query will be represented as "5,6,10" (quotes for clarity).
Definition
    
Class:
VolumeGuess
Method:
correctVolume
Parameters:
String[], int, int
Returns:
int
Method signature:
int correctVolume(String[] queries, int numberOfBoxes, int ithBox)
(be sure your method is public)
    

Notes
-
Keep in mind, the volume of the largest box is irrelevant.
Constraints
-
numberOfBoxes will be between 3 and 9, inclusive.
-
queries will contain exactly numberOfBoxes*(numberOfBoxes-1)/2 elements.
-
Every element of queries will be in the given format ("box1,box2,volume", quotes for clarity).
-
Each element of queries will contain between 5 and 50 characters, inclusive.
-
Each box1 will be an integer between 1 and numberOfBoxes, inclusive, with possible leading zeros.
-
Each box2 will be an integer between 1 and numberOfBoxes, inclusive, with possible leading zeros.
-
Each volume will be an integer between 1 and 500, inclusive, with possible leading zeros.
-
queries will contain no duplicates, that is, no pair of boxes will be compared twice.
-
No two boxes will have the same volume.
-
ithBox will be between 1 and numberOfBoxes, inclusive.
-
The given data will be consistent.
-
The box numbered ithBox will not be one of the two largest boxes.
Examples
0)

    
{"1,2,10","1,3,10","2,3,20"}
3
1
Returns: 10
If box 1 has volume 10, box 2 has volume 20 and box 3 has volume 30, we get the given data. Another possibility is box 1 has volume 10, box 2 has volume 30 and box 3 has volume 20. Another is box 1 has volume 10, box 2 has volume 45 and box 3 has volume 20. There are many possibilities (infinite in fact). However, in all of them box 1 has to have size 10.
1)

    
{"1,02,10","2,3,010","1,3,20"}
3
2
Returns: 10
If box 1 has volume 20, box 2 has volume 10 and box 3 has volume 30, we get the given data. (Note that leading zeros are allowed.)
2)

    
{"1,2,31","1,3,9","1,4,31","2,4,32","3,4,9","3,2,9"}
4
1
Returns: 31
One possibility is box 1 has volume 31, box 2 has volume 50, box 3 has volume 9 and box 4 has volume 32.
3)

    
{"1,2,31","1,3,9","1,4,31","2,4,32","3,4,9","3,2,9"}
4
3
Returns: 9
Same situation as above, but asks for a different ithbox.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.