#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Trim {
public:



vector <string> trim(vector <string> pixels)
{
	vector<string> A(50);
	
	for (int r = 0; r < 50; r++)
	{
		string x(50, '.');
		A[r].push_back(x);
	}
	
	for (int i = 0; i < pixels.size(); i++)
	{
		int a, b;
		sscanf(pixels[i].c_str(), "%d %d", &a, &b);
		A[a][b] = 'X';
	}
	int top = 0, bot = 49, left = 0, right = 49;
	for (top = 0; top < 50; top++)
	{
		bool flag = false;
		for (int c = 0; c < 50; c++)
		{
			if (A[top][c] == 'X')
			{
				flag = true;
			}
		}
		if (flag) break;
	}
	for (bot = 49; bot >= 0; bot--)
	{
		bool flag = false;
		for (int c = 0; c < 50; c++)
		{
			if (A[bot][c] == 'X')
			{
				flag = true;
			}
		}
		if (flag) break;
	}
	for (left = 0; left < 50; left++)
	{
		bool flag = false;
		for (int r = 0; r < 50; r++)
		{
			if (A[r][left] == 'X')
				flag = true;
		}
		if (flag) break;
	}
	for (int right = 49; right >= 0; right--)
	{
		bool flag = false;
		for (int r = 0; r < 50; r++)
		{
			if (A[r][right] == 'X')
				flag = true;
		}
		if (flag)
			break;
	}
	
	vector<string> result;
	for (int r = top; r <= bot; r++)
	{
		string x = "";
		for (int c = left; c <= right; c++)
		{
			x += A[r][c];
		}
		result.push_back(x);
	}
	return result;
}


};
	


Problem Statement
    
You are given a vector <string>, pixels, containing a list of black pixels you must draw on a 50 x 50 grid that is initially completely white. Each element of pixels is formated as "r c" (quotes for clarity only), where r is the row and c is the column (both 0-based) of a single pixel. Once all the pixels have been drawn, trim the grid and return it as a vector <string>.

The trim procedure removes all outer rows and columns that contain no black pixels. In other words, determine the left-most column that contains at least one black pixel and remove all columns to the left of that column, determine the top-most row that contains at least one black pixel and remove all rows above that row, etc... Black pixels should be represented in the return vector <string> as upper case 'X' characters, and white pixels should be represented as '.' characters. The jth character of the ith element of the vector <string> is the pixel at row i, column j.
Definition
    
Class:
Trim
Method:
trim
Parameters:
vector <string>
Returns:
vector <string>
Method signature:
vector <string> trim(vector <string> pixels)
(be sure your method is public)
    

Constraints
-
pixels contains between 1 and 50 elements, inclusive.
-
Each element of pixels is formatted as "r c" (quotes for clarity only), where r and c are integers between 0 and 49, inclusive, with no extra leading zeros.
Examples
0)

    
{"4 4", "14 14", "4 14", "14 4"}
Returns: 
{"X.........X",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "X.........X" }

1)

    
{"4 4", "14 14"}
Returns: 
{"X..........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "...........",
 "..........X" }

2)

    
{"4 4"}
Returns: {"X" }

3)

    
{"4 4", "4 14", "4 4"}
Returns: {"X.........X" }
Duplicate pixels are allowed.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.