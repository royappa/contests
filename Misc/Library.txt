// LIBRARY


// Simple split for a space separator. Splits on multiple spaces. 
// leading spaces & trailing spacse are also considered separators, thus induce an extra empty-string.
vector<string> split_space(string s)
{
	vector<string> results;
	istringstream fin(s);
	while (!fin.eof())
	{
		string x;
		fin >> x;
		results.push_back(x);
	}
	return results;
}


// Split on separator
// SPLIT_NONRE() 
// TESTED - may be slow if used in a loop because it makes a copy of the string "s" each time.
// That is because stupid strtok_r writes null chars into s.
// Actually strtok_r() should not be needed here but doesn't hurt.

#include <string.h>  /* for new C++ version */
vector<string> split_nonre(string s, string sep)
{
	char *sC = (char *) malloc(s.size()+1);
	strcpy(sC, s.c_str());
	char *sepC = (char *) sep.c_str();
	char *status = NULL;
	
	char *word;
	vector<string> results;
	while ((word = strtok_r(sC, sepC, &status)) != NULL)
	{
		results.push_back(word);
		sC = NULL;
	}
	return results;
}


string strtolower(string s) { for (int i = 0; i < s.size(); i++) { if (isupper(s[i]) s[i] = tolower(s[i]); } 

// UNTESTED
string itoa(int n) { char buf[1024]; sprintf(buf, "%d", n); return buf; }

// UNTESTED
string LLtoa(long long n) { char buf[1024]; sprintf(buf, "%ll", n); return buf; }

// UNTESTED
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a%b); }


