#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SalesFigures {
public:
vector<string> split_nonre(string s, string sep)
{
	char *sC = (char *) malloc(s.size()+1);
	strcpy(sC, s.c_str());
	char *sepC = (char *) sep.c_str();
	char *status = NULL;
	
	char *word;
	vector<string> results;
	while ((word = strtok_r(sC, sepC, &status)) != NULL)
	{
		results.push_back(word);
		sC = NULL;
	}
	return results;
}

int getCount(vector <string> sales, string client, string product)
{
	int count = 0;
	for (int i = 0; i < sales.size(); i++)
	{
		vector<string> v = split_nonre(sales[i], " ");
		if (v[0] == client)
		{
			for (int j = 1; j < v.size(); j += 2)
			{
				if (v[j] == product)
				{
					count += atoi(v[j+1].c_str());
				}
			}
		}
	}
	return count;
}
};





Problem Statement
    
You are given a black and white image in a vector <string>, image. Character j of element i (both 0-based indices) of image represents the pixel in row i, column j. 'X' characters represent black pixels and '.' characters represent white pixels. You are given a vector <string>, crops, which contains a series of rectangular crop operations that are performed on the image. Cropping is an operation that trims an image so that only the specified area of the original image remains. Each element of crops is formatted as "r1 c1 r2 c2" (quotes for clarity only), where the upper left corner of the area to crop is at row r1, column c1, and the lower right corner is at row r2, column c2. The coordinates are inclusive. The crop operations are performed in the order that they appear in crops, and each one is performed on the most recent version of the image. The constraints will guarantee that all crop operations will be within the boundaries of the image. Return the final cropped image as a vector <string> in the same format as the original image vector <string>.
Definition
    
Class:
Crop
Method:
crop
Parameters:
vector <string>, vector <string>
Returns:
vector <string>
Method signature:
vector <string> crop(vector <string> image, vector <string> crops)
(be sure your method is public)
    

Constraints
-
image will contain between 1 and 50 elements, inclusive.
-
Each element of image will contain between 1 and 50 characters, inclusive.
-
Each element of image will contain exactly the same number of characters.
-
Each element of image will contain only '.' and uppercase 'X' characters.
-
crops will contain between 1 and 10 elements, inclusive.
-
Each element of crops will be formatted as described in the problem statement and no integers within crops will contain extra leading zeros.
-
Within each element of crops, r2 will be greater than or equal to r1 and c2 will be greater than or equal to c1.
-
crops will contain no operations that exceed the boundaries of the image at any time in the cropping process.
Examples
0)

    
{".........",
 "X.XXXXXXX",
 "....X....",
 "........." }
{"1 0 2 8", "0 0 1 1"}
Returns: {"X.", ".." }
The first crop effectively removes the top and bottom rows of the image and results in:

X.XXXXXXX
....X....

The second crop is then performed relative to the new image:

X.
..
1)

    
{"X.X.X.X.X.X.X.X",
 ".X.X.X.X.X.X.X."}
{"0 0 1 14", "0 0 1 14", "0 0 1 14"}
Returns: {"X.X.X.X.X.X.X.X", ".X.X.X.X.X.X.X." }
These crops don't affect the original image at all.
2)

    
{".X..X.X.XX.",
 "..X..X...X.",
 "X......X..X",
 ".X....X...X",
 "..XXXX.X.X.",
 "XXX..XXX..X"}
{"0 0 0 0"}
Returns: {"." }

3)

    
{".X..X.X.XX.",
 "..X..X...X.",
 "X......X..X",
 ".X....X...X",
 "..XXXX.X.X.",
 "XXX..XXX..X"}
{"1 0 5 9", "0 1 4 8", "0 0 3 5"}
Returns: {".X..X.", "......", "X....X", ".XXXX." }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.is problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.